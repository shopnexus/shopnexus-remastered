// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: product.sql

package db

import (
	"context"
)

const lowestPriceProductSku = `-- name: LowestPriceProductSku :many
SELECT DISTINCT ON (spu_id) spu_id, id, price
FROM "catalog"."product_sku"
WHERE spu_id = ANY($1)
ORDER BY spu_id, price ASC
`

type LowestPriceProductSkuRow struct {
	SpuID int64 `json:"spu_id"`
	ID    int64 `json:"id"`
	Price int64 `json:"price"`
}

func (q *Queries) LowestPriceProductSku(ctx context.Context, spuID []int64) ([]LowestPriceProductSkuRow, error) {
	rows, err := q.db.Query(ctx, lowestPriceProductSku, spuID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []LowestPriceProductSkuRow{}
	for rows.Next() {
		var i LowestPriceProductSkuRow
		if err := rows.Scan(&i.SpuID, &i.ID, &i.Price); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
