// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: cart.sql

package db

import (
	"context"
)

const addCartItem = `-- name: AddCartItem :one
INSERT INTO "account".item_on_cart (cart_id, product_id, quantity)
VALUES ($1, $2, $3) ON CONFLICT (cart_id, product_id)
DO
UPDATE SET quantity = "account".item_on_cart.quantity + $3
  RETURNING quantity
`

type AddCartItemParams struct {
	CartID    int64 `json:"cart_id"`
	ProductID int64 `json:"product_id"`
	Quantity  int64 `json:"quantity"`
}

func (q *Queries) AddCartItem(ctx context.Context, arg AddCartItemParams) (int64, error) {
	row := q.db.QueryRow(ctx, addCartItem, arg.CartID, arg.ProductID, arg.Quantity)
	var quantity int64
	err := row.Scan(&quantity)
	return quantity, err
}

const clearCart = `-- name: ClearCart :exec
DELETE
FROM "account".item_on_cart
WHERE cart_id = $1
`

func (q *Queries) ClearCart(ctx context.Context, cartID int64) error {
	_, err := q.db.Exec(ctx, clearCart, cartID)
	return err
}

const createCart = `-- name: CreateCart :exec
INSERT INTO "account".cart (id)
VALUES ($1)
`

func (q *Queries) CreateCart(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, createCart, id)
	return err
}

const existsCart = `-- name: ExistsCart :one
SELECT EXISTS (SELECT 1
               FROM "account".cart
               WHERE id = $1)
`

func (q *Queries) ExistsCart(ctx context.Context, id int64) (bool, error) {
	row := q.db.QueryRow(ctx, existsCart, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getCartItems = `-- name: GetCartItems :many
SELECT cart_id, product_id, quantity, date_created
FROM "account".item_on_cart
WHERE cart_id = $1
  AND (
  cardinality(coalesce($2::bigint[], '{}')) = 0 OR
  product_id = ANY ($2::bigint[])
  )
ORDER BY date_created DESC
`

type GetCartItemsParams struct {
	CartID     int64   `json:"cart_id"`
	ProductIds []int64 `json:"product_ids"`
}

func (q *Queries) GetCartItems(ctx context.Context, arg GetCartItemsParams) ([]AccountItemOnCart, error) {
	rows, err := q.db.Query(ctx, getCartItems, arg.CartID, arg.ProductIds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AccountItemOnCart{}
	for rows.Next() {
		var i AccountItemOnCart
		if err := rows.Scan(
			&i.CartID,
			&i.ProductID,
			&i.Quantity,
			&i.DateCreated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeCartItem = `-- name: RemoveCartItem :exec
DELETE
FROM "account".item_on_cart
WHERE cart_id = $1
  AND product_id = ANY ($2::bigint[])
`

type RemoveCartItemParams struct {
	CartID     int64   `json:"cart_id"`
	ProductIds []int64 `json:"product_ids"`
}

func (q *Queries) RemoveCartItem(ctx context.Context, arg RemoveCartItemParams) error {
	_, err := q.db.Exec(ctx, removeCartItem, arg.CartID, arg.ProductIds)
	return err
}

const updateCartItem = `-- name: UpdateCartItem :one
UPDATE "account".item_on_cart
SET quantity = $3
WHERE cart_id = $1
  AND product_id = $2 RETURNING quantity
`

type UpdateCartItemParams struct {
	CartID    int64 `json:"cart_id"`
	ProductID int64 `json:"product_id"`
	Quantity  int64 `json:"quantity"`
}

func (q *Queries) UpdateCartItem(ctx context.Context, arg UpdateCartItemParams) (int64, error) {
	row := q.db.QueryRow(ctx, updateCartItem, arg.CartID, arg.ProductID, arg.Quantity)
	var quantity int64
	err := row.Scan(&quantity)
	return quantity, err
}
