// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: product_model.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countProductModels = `-- name: CountProductModels :one
SELECT COUNT(id)
FROM product.model pm
WHERE (
        (pm.type = $1 OR $1 IS NULL) AND
        (pm.brand_id = $2 OR $2 IS NULL) AND
        (pm.name ILIKE '%' || $3 || '%' OR $3 IS NULL) AND
        (pm.description ILIKE '%' || $4 || '%' OR $4 IS NULL) AND
        (pm.list_price >= $5 OR $5 IS NULL) AND
        (pm.list_price <= $6 OR $6 IS NULL) AND
        (pm.date_manufactured >= $7 OR $7 IS NULL) AND
        (pm.date_manufactured <= $8 OR $8 IS NULL)
        )
`

type CountProductModelsParams struct {
	Type                 pgtype.Int8        `json:"type"`
	BrandID              pgtype.Int8        `json:"brand_id"`
	Name                 pgtype.Text        `json:"name"`
	Description          pgtype.Text        `json:"description"`
	ListPriceFrom        pgtype.Int8        `json:"list_price_from"`
	ListPriceTo          pgtype.Int8        `json:"list_price_to"`
	DateManufacturedFrom pgtype.Timestamptz `json:"date_manufactured_from"`
	DateManufacturedTo   pgtype.Timestamptz `json:"date_manufactured_to"`
}

func (q *Queries) CountProductModels(ctx context.Context, arg CountProductModelsParams) (int64, error) {
	row := q.db.QueryRow(ctx, countProductModels,
		arg.Type,
		arg.BrandID,
		arg.Name,
		arg.Description,
		arg.ListPriceFrom,
		arg.ListPriceTo,
		arg.DateManufacturedFrom,
		arg.DateManufacturedTo,
	)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countProductTypes = `-- name: CountProductTypes :one
SELECT COUNT(id)
FROM product.type
WHERE (
        (name ILIKE '%' || $1 || '%' OR $1 IS NULL)
        )
`

func (q *Queries) CountProductTypes(ctx context.Context, name pgtype.Text) (int64, error) {
	row := q.db.QueryRow(ctx, countProductTypes, name)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createProductModel = `-- name: CreateProductModel :one
INSERT INTO product.model (type, brand_id, name, description, list_price, date_manufactured)
VALUES ($1, $2, $3, $4, $5, $6) RETURNING id, type, brand_id, name, description, list_price, date_manufactured
`

type CreateProductModelParams struct {
	Type             int64              `json:"type"`
	BrandID          int64              `json:"brand_id"`
	Name             string             `json:"name"`
	Description      string             `json:"description"`
	ListPrice        int64              `json:"list_price"`
	DateManufactured pgtype.Timestamptz `json:"date_manufactured"`
}

func (q *Queries) CreateProductModel(ctx context.Context, arg CreateProductModelParams) (ProductModel, error) {
	row := q.db.QueryRow(ctx, createProductModel,
		arg.Type,
		arg.BrandID,
		arg.Name,
		arg.Description,
		arg.ListPrice,
		arg.DateManufactured,
	)
	var i ProductModel
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.BrandID,
		&i.Name,
		&i.Description,
		&i.ListPrice,
		&i.DateManufactured,
	)
	return i, err
}

const deleteProductModel = `-- name: DeleteProductModel :exec
DELETE
FROM product.model
WHERE id = $1
`

func (q *Queries) DeleteProductModel(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteProductModel, id)
	return err
}

const getProductModel = `-- name: GetProductModel :one
WITH filtered_model AS (SELECT pm.id, pm.type, pm.brand_id, pm.name, pm.description, pm.list_price, pm.date_manufactured
                        FROM product.model pm
                        WHERE pm.id = $1),
     filtered_resources AS (SELECT res.owner_id,
                                   array_agg(res.url ORDER BY res.order ASC) AS resources
                            FROM product.resource res
                            WHERE res.owner_id = $1
                              AND res.type = 'PRODUCT_MODEL'
                            GROUP BY res.owner_id),
     filtered_tags AS (SELECT t.product_model_id,
                              array_agg(DISTINCT t.tag) AS tags
                       FROM product.tag_on_product_model t
                       WHERE t.product_model_id = $1
                       GROUP BY t.product_model_id)
SELECT pm.id, pm.type, pm.brand_id, pm.name, pm.description, pm.list_price, pm.date_manufactured,
       COALESCE(res.resources, '{}')::text[] AS resources, COALESCE(t.tags, '{}') AS tags
FROM filtered_model pm
       LEFT JOIN filtered_resources res ON res.owner_id = pm.id
       LEFT JOIN filtered_tags t ON t.product_model_id = pm.id
`

type GetProductModelRow struct {
	ID               int64              `json:"id"`
	Type             int64              `json:"type"`
	BrandID          int64              `json:"brand_id"`
	Name             string             `json:"name"`
	Description      string             `json:"description"`
	ListPrice        int64              `json:"list_price"`
	DateManufactured pgtype.Timestamptz `json:"date_manufactured"`
	Resources        []string           `json:"resources"`
	Tags             interface{}        `json:"tags"`
}

func (q *Queries) GetProductModel(ctx context.Context, id int64) (GetProductModelRow, error) {
	row := q.db.QueryRow(ctx, getProductModel, id)
	var i GetProductModelRow
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.BrandID,
		&i.Name,
		&i.Description,
		&i.ListPrice,
		&i.DateManufactured,
		&i.Resources,
		&i.Tags,
	)
	return i, err
}

const getProductSerialIDs = `-- name: GetProductSerialIDs :many
SELECT serial_id
FROM product.serial
WHERE product_id = $1
`

func (q *Queries) GetProductSerialIDs(ctx context.Context, productID int64) ([]string, error) {
	rows, err := q.db.Query(ctx, getProductSerialIDs, productID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var serial_id string
		if err := rows.Scan(&serial_id); err != nil {
			return nil, err
		}
		items = append(items, serial_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProductModels = `-- name: ListProductModels :many
WITH filtered_models AS (SELECT pm.id, pm.type, pm.brand_id, pm.name, pm.description, pm.list_price, pm.date_manufactured
                         FROM product.model pm
                         WHERE (
                                 (pm.type = $3 OR $3 IS NULL) AND
                                 (pm.brand_id = $4 OR $4 IS NULL) AND
                                 (pm.name ILIKE '%' || $5 || '%' OR $5 IS NULL) AND
                                 (pm.description ILIKE '%' || $6 || '%' OR $6 IS NULL) AND
                                 (pm.list_price >= $7 OR
                                  $7 IS NULL) AND
                                 (pm.list_price <= $8 OR $8 IS NULL) AND
                                 (pm.date_manufactured >= $9 OR
                                  $9 IS NULL) AND
                                 (pm.date_manufactured <= $10 OR
                                  $10 IS NULL)
                                 )),
     filtered_resources AS (SELECT res.owner_id,
                                   array_agg(res.url ORDER BY res.order ASC) AS resources
                            FROM product.resource res
                            WHERE res.owner_id IN (SELECT id FROM filtered_models)
                              AND res.type = 'PRODUCT_MODEL'
                            GROUP BY res.owner_id),
     filtered_tags AS (SELECT t.product_model_id,
                              array_agg(DISTINCT t.tag) AS tags
                       FROM product.tag_on_product_model t
                       WHERE t.product_model_id IN (SELECT id FROM filtered_models)
                       GROUP BY t.product_model_id)
SELECT pm.id, pm.type, pm.brand_id, pm.name, pm.description, pm.list_price, pm.date_manufactured,
       COALESCE(res.resources, '{}')::text[] AS resources, COALESCE(t.tags, '{}') AS tags
FROM filtered_models pm
       LEFT JOIN filtered_resources res ON res.owner_id = pm.id
       LEFT JOIN filtered_tags t ON t.product_model_id = pm.id
ORDER BY pm.date_manufactured DESC LIMIT $2
OFFSET $1
`

type ListProductModelsParams struct {
	Offset               int32              `json:"offset"`
	Limit                int32              `json:"limit"`
	Type                 pgtype.Int8        `json:"type"`
	BrandID              pgtype.Int8        `json:"brand_id"`
	Name                 pgtype.Text        `json:"name"`
	Description          pgtype.Text        `json:"description"`
	ListPriceFrom        pgtype.Int8        `json:"list_price_from"`
	ListPriceTo          pgtype.Int8        `json:"list_price_to"`
	DateManufacturedFrom pgtype.Timestamptz `json:"date_manufactured_from"`
	DateManufacturedTo   pgtype.Timestamptz `json:"date_manufactured_to"`
}

type ListProductModelsRow struct {
	ID               int64              `json:"id"`
	Type             int64              `json:"type"`
	BrandID          int64              `json:"brand_id"`
	Name             string             `json:"name"`
	Description      string             `json:"description"`
	ListPrice        int64              `json:"list_price"`
	DateManufactured pgtype.Timestamptz `json:"date_manufactured"`
	Resources        []string           `json:"resources"`
	Tags             interface{}        `json:"tags"`
}

func (q *Queries) ListProductModels(ctx context.Context, arg ListProductModelsParams) ([]ListProductModelsRow, error) {
	rows, err := q.db.Query(ctx, listProductModels,
		arg.Offset,
		arg.Limit,
		arg.Type,
		arg.BrandID,
		arg.Name,
		arg.Description,
		arg.ListPriceFrom,
		arg.ListPriceTo,
		arg.DateManufacturedFrom,
		arg.DateManufacturedTo,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListProductModelsRow{}
	for rows.Next() {
		var i ListProductModelsRow
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.BrandID,
			&i.Name,
			&i.Description,
			&i.ListPrice,
			&i.DateManufactured,
			&i.Resources,
			&i.Tags,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProductTypes = `-- name: ListProductTypes :many
SELECT t.id, t.name
FROM product.type t
WHERE (
        (name ILIKE '%' || $1 || '%' OR $1 IS NULL)
        )
ORDER BY t.id DESC LIMIT $3
OFFSET $2
`

type ListProductTypesParams struct {
	Name   pgtype.Text `json:"name"`
	Offset int32       `json:"offset"`
	Limit  int32       `json:"limit"`
}

func (q *Queries) ListProductTypes(ctx context.Context, arg ListProductTypesParams) ([]ProductType, error) {
	rows, err := q.db.Query(ctx, listProductTypes, arg.Name, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ProductType{}
	for rows.Next() {
		var i ProductType
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProductModel = `-- name: UpdateProductModel :one
UPDATE product.model
SET type              = COALESCE($2, type),
    brand_id          = COALESCE($3, brand_id),
    name              = COALESCE($4, name),
    description       = COALESCE($5, description),
    list_price        = COALESCE($6, list_price),
    date_manufactured = COALESCE($7, date_manufactured)
WHERE id = $1 RETURNING id, type, brand_id, name, description, list_price, date_manufactured
`

type UpdateProductModelParams struct {
	ID               int64              `json:"id"`
	Type             pgtype.Int8        `json:"type"`
	BrandID          pgtype.Int8        `json:"brand_id"`
	Name             pgtype.Text        `json:"name"`
	Description      pgtype.Text        `json:"description"`
	ListPrice        pgtype.Int8        `json:"list_price"`
	DateManufactured pgtype.Timestamptz `json:"date_manufactured"`
}

func (q *Queries) UpdateProductModel(ctx context.Context, arg UpdateProductModelParams) (ProductModel, error) {
	row := q.db.QueryRow(ctx, updateProductModel,
		arg.ID,
		arg.Type,
		arg.BrandID,
		arg.Name,
		arg.Description,
		arg.ListPrice,
		arg.DateManufactured,
	)
	var i ProductModel
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.BrandID,
		&i.Name,
		&i.Description,
		&i.ListPrice,
		&i.DateManufactured,
	)
	return i, err
}
