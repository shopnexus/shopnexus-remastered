// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: resource.sql

package db

import (
	"context"
)

const listSharedResourceFirst = `-- name: ListSharedResourceFirst :many
SELECT DISTINCT on (owner_id) url, owner_id
FROM "shared"."resource"
WHERE
    owner_type = $1 AND
    owner_id = ANY($2)
ORDER BY "owner_id", "order" ASC
`

type ListSharedResourceFirstParams struct {
	OwnerType SharedResourceType `json:"owner_type"`
	OwnerID   []int64            `json:"owner_id"`
}

type ListSharedResourceFirstRow struct {
	Url     string `json:"url"`
	OwnerID int64  `json:"owner_id"`
}

func (q *Queries) ListSharedResourceFirst(ctx context.Context, arg ListSharedResourceFirstParams) ([]ListSharedResourceFirstRow, error) {
	rows, err := q.db.Query(ctx, listSharedResourceFirst, arg.OwnerType, arg.OwnerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListSharedResourceFirstRow{}
	for rows.Next() {
		var i ListSharedResourceFirstRow
		if err := rows.Scan(&i.Url, &i.OwnerID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
