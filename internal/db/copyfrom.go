// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: copyfrom.go

package db

import (
	"context"
)

// iteratorForCreateAccountAddress implements pgx.CopyFromSource.
type iteratorForCreateAccountAddress struct {
	rows                 []CreateAccountAddressParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateAccountAddress) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateAccountAddress) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].Code,
		r.rows[0].AccountID,
		r.rows[0].Type,
		r.rows[0].FullName,
		r.rows[0].Phone,
		r.rows[0].PhoneVerified,
		r.rows[0].AddressLine,
		r.rows[0].City,
		r.rows[0].StateProvince,
		r.rows[0].Country,
		r.rows[0].DateCreated,
		r.rows[0].DateUpdated,
	}, nil
}

func (r iteratorForCreateAccountAddress) Err() error {
	return nil
}

func (q *Queries) CreateAccountAddress(ctx context.Context, arg []CreateAccountAddressParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"account", "address"}, []string{"code", "account_id", "type", "full_name", "phone", "phone_verified", "address_line", "city", "state_province", "country", "date_created", "date_updated"}, &iteratorForCreateAccountAddress{rows: arg})
}

// iteratorForCreateAccountBase implements pgx.CopyFromSource.
type iteratorForCreateAccountBase struct {
	rows                 []CreateAccountBaseParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateAccountBase) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateAccountBase) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].Code,
		r.rows[0].Type,
		r.rows[0].Status,
		r.rows[0].Phone,
		r.rows[0].Email,
		r.rows[0].Username,
		r.rows[0].Password,
		r.rows[0].DateCreated,
		r.rows[0].DateUpdated,
	}, nil
}

func (r iteratorForCreateAccountBase) Err() error {
	return nil
}

func (q *Queries) CreateAccountBase(ctx context.Context, arg []CreateAccountBaseParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"account", "base"}, []string{"code", "type", "status", "phone", "email", "username", "password", "date_created", "date_updated"}, &iteratorForCreateAccountBase{rows: arg})
}

// iteratorForCreateAccountCartItem implements pgx.CopyFromSource.
type iteratorForCreateAccountCartItem struct {
	rows                 []CreateAccountCartItemParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateAccountCartItem) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateAccountCartItem) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].CartID,
		r.rows[0].SkuID,
		r.rows[0].Quantity,
		r.rows[0].DateCreated,
		r.rows[0].DateUpdated,
	}, nil
}

func (r iteratorForCreateAccountCartItem) Err() error {
	return nil
}

func (q *Queries) CreateAccountCartItem(ctx context.Context, arg []CreateAccountCartItemParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"account", "cart_item"}, []string{"cart_id", "sku_id", "quantity", "date_created", "date_updated"}, &iteratorForCreateAccountCartItem{rows: arg})
}

// iteratorForCreateAccountCustomer implements pgx.CopyFromSource.
type iteratorForCreateAccountCustomer struct {
	rows                 []CreateAccountCustomerParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateAccountCustomer) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateAccountCustomer) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].ID,
		r.rows[0].DefaultAddressID,
		r.rows[0].DateCreated,
		r.rows[0].DateUpdated,
	}, nil
}

func (r iteratorForCreateAccountCustomer) Err() error {
	return nil
}

func (q *Queries) CreateAccountCustomer(ctx context.Context, arg []CreateAccountCustomerParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"account", "customer"}, []string{"id", "default_address_id", "date_created", "date_updated"}, &iteratorForCreateAccountCustomer{rows: arg})
}

// iteratorForCreateAccountIncomeHistory implements pgx.CopyFromSource.
type iteratorForCreateAccountIncomeHistory struct {
	rows                 []CreateAccountIncomeHistoryParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateAccountIncomeHistory) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateAccountIncomeHistory) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].AccountID,
		r.rows[0].Type,
		r.rows[0].Income,
		r.rows[0].CurrentBalance,
		r.rows[0].Note,
		r.rows[0].DateCreated,
		r.rows[0].Hash,
		r.rows[0].PrevHash,
	}, nil
}

func (r iteratorForCreateAccountIncomeHistory) Err() error {
	return nil
}

func (q *Queries) CreateAccountIncomeHistory(ctx context.Context, arg []CreateAccountIncomeHistoryParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"account", "income_history"}, []string{"account_id", "type", "income", "current_balance", "note", "date_created", "hash", "prev_hash"}, &iteratorForCreateAccountIncomeHistory{rows: arg})
}

// iteratorForCreateAccountNotification implements pgx.CopyFromSource.
type iteratorForCreateAccountNotification struct {
	rows                 []CreateAccountNotificationParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateAccountNotification) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateAccountNotification) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].AccountID,
		r.rows[0].Type,
		r.rows[0].Channel,
		r.rows[0].IsRead,
		r.rows[0].Content,
		r.rows[0].DateCreated,
		r.rows[0].DateUpdated,
		r.rows[0].DateSent,
		r.rows[0].DateScheduled,
	}, nil
}

func (r iteratorForCreateAccountNotification) Err() error {
	return nil
}

func (q *Queries) CreateAccountNotification(ctx context.Context, arg []CreateAccountNotificationParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"account", "notification"}, []string{"account_id", "type", "channel", "is_read", "content", "date_created", "date_updated", "date_sent", "date_scheduled"}, &iteratorForCreateAccountNotification{rows: arg})
}

// iteratorForCreateAccountProfile implements pgx.CopyFromSource.
type iteratorForCreateAccountProfile struct {
	rows                 []CreateAccountProfileParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateAccountProfile) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateAccountProfile) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].ID,
		r.rows[0].Gender,
		r.rows[0].Name,
		r.rows[0].DateOfBirth,
		r.rows[0].AvatarRsID,
		r.rows[0].EmailVerified,
		r.rows[0].PhoneVerified,
		r.rows[0].DateCreated,
		r.rows[0].DateUpdated,
	}, nil
}

func (r iteratorForCreateAccountProfile) Err() error {
	return nil
}

func (q *Queries) CreateAccountProfile(ctx context.Context, arg []CreateAccountProfileParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"account", "profile"}, []string{"id", "gender", "name", "date_of_birth", "avatar_rs_id", "email_verified", "phone_verified", "date_created", "date_updated"}, &iteratorForCreateAccountProfile{rows: arg})
}

// iteratorForCreateAccountVendor implements pgx.CopyFromSource.
type iteratorForCreateAccountVendor struct {
	rows                 []CreateAccountVendorParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateAccountVendor) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateAccountVendor) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].ID,
		r.rows[0].Description,
	}, nil
}

func (r iteratorForCreateAccountVendor) Err() error {
	return nil
}

func (q *Queries) CreateAccountVendor(ctx context.Context, arg []CreateAccountVendorParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"account", "vendor"}, []string{"id", "description"}, &iteratorForCreateAccountVendor{rows: arg})
}

// iteratorForCreateCatalogBrand implements pgx.CopyFromSource.
type iteratorForCreateCatalogBrand struct {
	rows                 []CreateCatalogBrandParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateCatalogBrand) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateCatalogBrand) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].Code,
		r.rows[0].Name,
		r.rows[0].Description,
	}, nil
}

func (r iteratorForCreateCatalogBrand) Err() error {
	return nil
}

func (q *Queries) CreateCatalogBrand(ctx context.Context, arg []CreateCatalogBrandParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"catalog", "brand"}, []string{"code", "name", "description"}, &iteratorForCreateCatalogBrand{rows: arg})
}

// iteratorForCreateCatalogCategory implements pgx.CopyFromSource.
type iteratorForCreateCatalogCategory struct {
	rows                 []CreateCatalogCategoryParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateCatalogCategory) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateCatalogCategory) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].Name,
		r.rows[0].Description,
		r.rows[0].ParentID,
	}, nil
}

func (r iteratorForCreateCatalogCategory) Err() error {
	return nil
}

func (q *Queries) CreateCatalogCategory(ctx context.Context, arg []CreateCatalogCategoryParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"catalog", "category"}, []string{"name", "description", "parent_id"}, &iteratorForCreateCatalogCategory{rows: arg})
}

// iteratorForCreateCatalogComment implements pgx.CopyFromSource.
type iteratorForCreateCatalogComment struct {
	rows                 []CreateCatalogCommentParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateCatalogComment) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateCatalogComment) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].Code,
		r.rows[0].AccountID,
		r.rows[0].RefType,
		r.rows[0].RefID,
		r.rows[0].Body,
		r.rows[0].Upvote,
		r.rows[0].Downvote,
		r.rows[0].Score,
		r.rows[0].DateCreated,
		r.rows[0].DateUpdated,
	}, nil
}

func (r iteratorForCreateCatalogComment) Err() error {
	return nil
}

func (q *Queries) CreateCatalogComment(ctx context.Context, arg []CreateCatalogCommentParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"catalog", "comment"}, []string{"code", "account_id", "ref_type", "ref_id", "body", "upvote", "downvote", "score", "date_created", "date_updated"}, &iteratorForCreateCatalogComment{rows: arg})
}

// iteratorForCreateCatalogProductSku implements pgx.CopyFromSource.
type iteratorForCreateCatalogProductSku struct {
	rows                 []CreateCatalogProductSkuParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateCatalogProductSku) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateCatalogProductSku) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].Code,
		r.rows[0].SpuID,
		r.rows[0].Price,
		r.rows[0].CanCombine,
		r.rows[0].DateCreated,
		r.rows[0].DateDeleted,
	}, nil
}

func (r iteratorForCreateCatalogProductSku) Err() error {
	return nil
}

func (q *Queries) CreateCatalogProductSku(ctx context.Context, arg []CreateCatalogProductSkuParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"catalog", "product_sku"}, []string{"code", "spu_id", "price", "can_combine", "date_created", "date_deleted"}, &iteratorForCreateCatalogProductSku{rows: arg})
}

// iteratorForCreateCatalogProductSkuAttribute implements pgx.CopyFromSource.
type iteratorForCreateCatalogProductSkuAttribute struct {
	rows                 []CreateCatalogProductSkuAttributeParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateCatalogProductSkuAttribute) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateCatalogProductSkuAttribute) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].Code,
		r.rows[0].SkuID,
		r.rows[0].Name,
		r.rows[0].Value,
		r.rows[0].DateCreated,
		r.rows[0].DateUpdated,
	}, nil
}

func (r iteratorForCreateCatalogProductSkuAttribute) Err() error {
	return nil
}

func (q *Queries) CreateCatalogProductSkuAttribute(ctx context.Context, arg []CreateCatalogProductSkuAttributeParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"catalog", "product_sku_attribute"}, []string{"code", "sku_id", "name", "value", "date_created", "date_updated"}, &iteratorForCreateCatalogProductSkuAttribute{rows: arg})
}

// iteratorForCreateCatalogProductSpu implements pgx.CopyFromSource.
type iteratorForCreateCatalogProductSpu struct {
	rows                 []CreateCatalogProductSpuParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateCatalogProductSpu) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateCatalogProductSpu) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].Code,
		r.rows[0].AccountID,
		r.rows[0].CategoryID,
		r.rows[0].BrandID,
		r.rows[0].Name,
		r.rows[0].Description,
		r.rows[0].IsActive,
		r.rows[0].DateManufactured,
		r.rows[0].DateCreated,
		r.rows[0].DateUpdated,
		r.rows[0].DateDeleted,
	}, nil
}

func (r iteratorForCreateCatalogProductSpu) Err() error {
	return nil
}

func (q *Queries) CreateCatalogProductSpu(ctx context.Context, arg []CreateCatalogProductSpuParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"catalog", "product_spu"}, []string{"code", "account_id", "category_id", "brand_id", "name", "description", "is_active", "date_manufactured", "date_created", "date_updated", "date_deleted"}, &iteratorForCreateCatalogProductSpu{rows: arg})
}

// iteratorForCreateCatalogProductSpuTag implements pgx.CopyFromSource.
type iteratorForCreateCatalogProductSpuTag struct {
	rows                 []CreateCatalogProductSpuTagParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateCatalogProductSpuTag) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateCatalogProductSpuTag) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].SpuID,
		r.rows[0].TagID,
	}, nil
}

func (r iteratorForCreateCatalogProductSpuTag) Err() error {
	return nil
}

func (q *Queries) CreateCatalogProductSpuTag(ctx context.Context, arg []CreateCatalogProductSpuTagParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"catalog", "product_spu_tag"}, []string{"spu_id", "tag_id"}, &iteratorForCreateCatalogProductSpuTag{rows: arg})
}

// iteratorForCreateCatalogTag implements pgx.CopyFromSource.
type iteratorForCreateCatalogTag struct {
	rows                 []CreateCatalogTagParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateCatalogTag) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateCatalogTag) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].Tag,
		r.rows[0].Description,
	}, nil
}

func (r iteratorForCreateCatalogTag) Err() error {
	return nil
}

func (q *Queries) CreateCatalogTag(ctx context.Context, arg []CreateCatalogTagParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"catalog", "tag"}, []string{"tag", "description"}, &iteratorForCreateCatalogTag{rows: arg})
}

// iteratorForCreateDefaultAccountAddress implements pgx.CopyFromSource.
type iteratorForCreateDefaultAccountAddress struct {
	rows                 []CreateDefaultAccountAddressParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateDefaultAccountAddress) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateDefaultAccountAddress) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].Code,
		r.rows[0].AccountID,
		r.rows[0].FullName,
		r.rows[0].Phone,
		r.rows[0].AddressLine,
		r.rows[0].City,
		r.rows[0].StateProvince,
		r.rows[0].Country,
	}, nil
}

func (r iteratorForCreateDefaultAccountAddress) Err() error {
	return nil
}

func (q *Queries) CreateDefaultAccountAddress(ctx context.Context, arg []CreateDefaultAccountAddressParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"account", "address"}, []string{"code", "account_id", "full_name", "phone", "address_line", "city", "state_province", "country"}, &iteratorForCreateDefaultAccountAddress{rows: arg})
}

// iteratorForCreateDefaultAccountBase implements pgx.CopyFromSource.
type iteratorForCreateDefaultAccountBase struct {
	rows                 []CreateDefaultAccountBaseParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateDefaultAccountBase) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateDefaultAccountBase) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].Code,
		r.rows[0].Type,
		r.rows[0].Phone,
		r.rows[0].Email,
		r.rows[0].Username,
		r.rows[0].Password,
	}, nil
}

func (r iteratorForCreateDefaultAccountBase) Err() error {
	return nil
}

func (q *Queries) CreateDefaultAccountBase(ctx context.Context, arg []CreateDefaultAccountBaseParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"account", "base"}, []string{"code", "type", "phone", "email", "username", "password"}, &iteratorForCreateDefaultAccountBase{rows: arg})
}

// iteratorForCreateDefaultAccountCartItem implements pgx.CopyFromSource.
type iteratorForCreateDefaultAccountCartItem struct {
	rows                 []CreateDefaultAccountCartItemParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateDefaultAccountCartItem) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateDefaultAccountCartItem) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].CartID,
		r.rows[0].SkuID,
		r.rows[0].Quantity,
	}, nil
}

func (r iteratorForCreateDefaultAccountCartItem) Err() error {
	return nil
}

func (q *Queries) CreateDefaultAccountCartItem(ctx context.Context, arg []CreateDefaultAccountCartItemParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"account", "cart_item"}, []string{"cart_id", "sku_id", "quantity"}, &iteratorForCreateDefaultAccountCartItem{rows: arg})
}

// iteratorForCreateDefaultAccountCustomer implements pgx.CopyFromSource.
type iteratorForCreateDefaultAccountCustomer struct {
	rows                 []CreateDefaultAccountCustomerParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateDefaultAccountCustomer) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateDefaultAccountCustomer) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].ID,
		r.rows[0].DefaultAddressID,
	}, nil
}

func (r iteratorForCreateDefaultAccountCustomer) Err() error {
	return nil
}

func (q *Queries) CreateDefaultAccountCustomer(ctx context.Context, arg []CreateDefaultAccountCustomerParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"account", "customer"}, []string{"id", "default_address_id"}, &iteratorForCreateDefaultAccountCustomer{rows: arg})
}

// iteratorForCreateDefaultAccountIncomeHistory implements pgx.CopyFromSource.
type iteratorForCreateDefaultAccountIncomeHistory struct {
	rows                 []CreateDefaultAccountIncomeHistoryParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateDefaultAccountIncomeHistory) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateDefaultAccountIncomeHistory) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].AccountID,
		r.rows[0].Type,
		r.rows[0].Income,
		r.rows[0].CurrentBalance,
		r.rows[0].Note,
		r.rows[0].Hash,
		r.rows[0].PrevHash,
	}, nil
}

func (r iteratorForCreateDefaultAccountIncomeHistory) Err() error {
	return nil
}

func (q *Queries) CreateDefaultAccountIncomeHistory(ctx context.Context, arg []CreateDefaultAccountIncomeHistoryParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"account", "income_history"}, []string{"account_id", "type", "income", "current_balance", "note", "hash", "prev_hash"}, &iteratorForCreateDefaultAccountIncomeHistory{rows: arg})
}

// iteratorForCreateDefaultAccountNotification implements pgx.CopyFromSource.
type iteratorForCreateDefaultAccountNotification struct {
	rows                 []CreateDefaultAccountNotificationParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateDefaultAccountNotification) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateDefaultAccountNotification) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].AccountID,
		r.rows[0].Type,
		r.rows[0].Channel,
		r.rows[0].Content,
		r.rows[0].DateSent,
		r.rows[0].DateScheduled,
	}, nil
}

func (r iteratorForCreateDefaultAccountNotification) Err() error {
	return nil
}

func (q *Queries) CreateDefaultAccountNotification(ctx context.Context, arg []CreateDefaultAccountNotificationParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"account", "notification"}, []string{"account_id", "type", "channel", "content", "date_sent", "date_scheduled"}, &iteratorForCreateDefaultAccountNotification{rows: arg})
}

// iteratorForCreateDefaultAccountProfile implements pgx.CopyFromSource.
type iteratorForCreateDefaultAccountProfile struct {
	rows                 []CreateDefaultAccountProfileParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateDefaultAccountProfile) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateDefaultAccountProfile) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].ID,
		r.rows[0].Gender,
		r.rows[0].Name,
		r.rows[0].DateOfBirth,
		r.rows[0].AvatarRsID,
	}, nil
}

func (r iteratorForCreateDefaultAccountProfile) Err() error {
	return nil
}

func (q *Queries) CreateDefaultAccountProfile(ctx context.Context, arg []CreateDefaultAccountProfileParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"account", "profile"}, []string{"id", "gender", "name", "date_of_birth", "avatar_rs_id"}, &iteratorForCreateDefaultAccountProfile{rows: arg})
}

// iteratorForCreateDefaultAccountVendor implements pgx.CopyFromSource.
type iteratorForCreateDefaultAccountVendor struct {
	rows                 []int64
	skippedFirstNextCall bool
}

func (r *iteratorForCreateDefaultAccountVendor) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateDefaultAccountVendor) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0],
	}, nil
}

func (r iteratorForCreateDefaultAccountVendor) Err() error {
	return nil
}

func (q *Queries) CreateDefaultAccountVendor(ctx context.Context, id []int64) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"account", "vendor"}, []string{"id"}, &iteratorForCreateDefaultAccountVendor{rows: id})
}

// iteratorForCreateDefaultCatalogBrand implements pgx.CopyFromSource.
type iteratorForCreateDefaultCatalogBrand struct {
	rows                 []CreateDefaultCatalogBrandParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateDefaultCatalogBrand) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateDefaultCatalogBrand) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].Code,
		r.rows[0].Name,
		r.rows[0].Description,
	}, nil
}

func (r iteratorForCreateDefaultCatalogBrand) Err() error {
	return nil
}

func (q *Queries) CreateDefaultCatalogBrand(ctx context.Context, arg []CreateDefaultCatalogBrandParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"catalog", "brand"}, []string{"code", "name", "description"}, &iteratorForCreateDefaultCatalogBrand{rows: arg})
}

// iteratorForCreateDefaultCatalogCategory implements pgx.CopyFromSource.
type iteratorForCreateDefaultCatalogCategory struct {
	rows                 []CreateDefaultCatalogCategoryParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateDefaultCatalogCategory) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateDefaultCatalogCategory) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].Name,
		r.rows[0].ParentID,
	}, nil
}

func (r iteratorForCreateDefaultCatalogCategory) Err() error {
	return nil
}

func (q *Queries) CreateDefaultCatalogCategory(ctx context.Context, arg []CreateDefaultCatalogCategoryParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"catalog", "category"}, []string{"name", "parent_id"}, &iteratorForCreateDefaultCatalogCategory{rows: arg})
}

// iteratorForCreateDefaultCatalogComment implements pgx.CopyFromSource.
type iteratorForCreateDefaultCatalogComment struct {
	rows                 []CreateDefaultCatalogCommentParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateDefaultCatalogComment) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateDefaultCatalogComment) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].Code,
		r.rows[0].AccountID,
		r.rows[0].RefType,
		r.rows[0].RefID,
		r.rows[0].Body,
	}, nil
}

func (r iteratorForCreateDefaultCatalogComment) Err() error {
	return nil
}

func (q *Queries) CreateDefaultCatalogComment(ctx context.Context, arg []CreateDefaultCatalogCommentParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"catalog", "comment"}, []string{"code", "account_id", "ref_type", "ref_id", "body"}, &iteratorForCreateDefaultCatalogComment{rows: arg})
}

// iteratorForCreateDefaultCatalogProductSku implements pgx.CopyFromSource.
type iteratorForCreateDefaultCatalogProductSku struct {
	rows                 []CreateDefaultCatalogProductSkuParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateDefaultCatalogProductSku) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateDefaultCatalogProductSku) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].Code,
		r.rows[0].SpuID,
		r.rows[0].Price,
		r.rows[0].DateDeleted,
	}, nil
}

func (r iteratorForCreateDefaultCatalogProductSku) Err() error {
	return nil
}

func (q *Queries) CreateDefaultCatalogProductSku(ctx context.Context, arg []CreateDefaultCatalogProductSkuParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"catalog", "product_sku"}, []string{"code", "spu_id", "price", "date_deleted"}, &iteratorForCreateDefaultCatalogProductSku{rows: arg})
}

// iteratorForCreateDefaultCatalogProductSkuAttribute implements pgx.CopyFromSource.
type iteratorForCreateDefaultCatalogProductSkuAttribute struct {
	rows                 []CreateDefaultCatalogProductSkuAttributeParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateDefaultCatalogProductSkuAttribute) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateDefaultCatalogProductSkuAttribute) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].Code,
		r.rows[0].SkuID,
		r.rows[0].Name,
		r.rows[0].Value,
	}, nil
}

func (r iteratorForCreateDefaultCatalogProductSkuAttribute) Err() error {
	return nil
}

func (q *Queries) CreateDefaultCatalogProductSkuAttribute(ctx context.Context, arg []CreateDefaultCatalogProductSkuAttributeParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"catalog", "product_sku_attribute"}, []string{"code", "sku_id", "name", "value"}, &iteratorForCreateDefaultCatalogProductSkuAttribute{rows: arg})
}

// iteratorForCreateDefaultCatalogProductSpu implements pgx.CopyFromSource.
type iteratorForCreateDefaultCatalogProductSpu struct {
	rows                 []CreateDefaultCatalogProductSpuParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateDefaultCatalogProductSpu) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateDefaultCatalogProductSpu) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].Code,
		r.rows[0].AccountID,
		r.rows[0].CategoryID,
		r.rows[0].BrandID,
		r.rows[0].Name,
		r.rows[0].Description,
		r.rows[0].DateManufactured,
		r.rows[0].DateDeleted,
	}, nil
}

func (r iteratorForCreateDefaultCatalogProductSpu) Err() error {
	return nil
}

func (q *Queries) CreateDefaultCatalogProductSpu(ctx context.Context, arg []CreateDefaultCatalogProductSpuParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"catalog", "product_spu"}, []string{"code", "account_id", "category_id", "brand_id", "name", "description", "date_manufactured", "date_deleted"}, &iteratorForCreateDefaultCatalogProductSpu{rows: arg})
}

// iteratorForCreateDefaultCatalogProductSpuTag implements pgx.CopyFromSource.
type iteratorForCreateDefaultCatalogProductSpuTag struct {
	rows                 []CreateDefaultCatalogProductSpuTagParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateDefaultCatalogProductSpuTag) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateDefaultCatalogProductSpuTag) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].SpuID,
		r.rows[0].TagID,
	}, nil
}

func (r iteratorForCreateDefaultCatalogProductSpuTag) Err() error {
	return nil
}

func (q *Queries) CreateDefaultCatalogProductSpuTag(ctx context.Context, arg []CreateDefaultCatalogProductSpuTagParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"catalog", "product_spu_tag"}, []string{"spu_id", "tag_id"}, &iteratorForCreateDefaultCatalogProductSpuTag{rows: arg})
}

// iteratorForCreateDefaultCatalogTag implements pgx.CopyFromSource.
type iteratorForCreateDefaultCatalogTag struct {
	rows                 []string
	skippedFirstNextCall bool
}

func (r *iteratorForCreateDefaultCatalogTag) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateDefaultCatalogTag) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0],
	}, nil
}

func (r iteratorForCreateDefaultCatalogTag) Err() error {
	return nil
}

func (q *Queries) CreateDefaultCatalogTag(ctx context.Context, tag []string) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"catalog", "tag"}, []string{"tag"}, &iteratorForCreateDefaultCatalogTag{rows: tag})
}

// iteratorForCreateDefaultInventorySkuSerial implements pgx.CopyFromSource.
type iteratorForCreateDefaultInventorySkuSerial struct {
	rows                 []CreateDefaultInventorySkuSerialParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateDefaultInventorySkuSerial) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateDefaultInventorySkuSerial) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].SerialNumber,
		r.rows[0].SkuID,
		r.rows[0].Status,
	}, nil
}

func (r iteratorForCreateDefaultInventorySkuSerial) Err() error {
	return nil
}

func (q *Queries) CreateDefaultInventorySkuSerial(ctx context.Context, arg []CreateDefaultInventorySkuSerialParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"inventory", "sku_serial"}, []string{"serial_number", "sku_id", "status"}, &iteratorForCreateDefaultInventorySkuSerial{rows: arg})
}

// iteratorForCreateDefaultInventoryStock implements pgx.CopyFromSource.
type iteratorForCreateDefaultInventoryStock struct {
	rows                 []CreateDefaultInventoryStockParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateDefaultInventoryStock) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateDefaultInventoryStock) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].RefType,
		r.rows[0].RefID,
	}, nil
}

func (r iteratorForCreateDefaultInventoryStock) Err() error {
	return nil
}

func (q *Queries) CreateDefaultInventoryStock(ctx context.Context, arg []CreateDefaultInventoryStockParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"inventory", "stock"}, []string{"ref_type", "ref_id"}, &iteratorForCreateDefaultInventoryStock{rows: arg})
}

// iteratorForCreateDefaultInventoryStockHistory implements pgx.CopyFromSource.
type iteratorForCreateDefaultInventoryStockHistory struct {
	rows                 []CreateDefaultInventoryStockHistoryParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateDefaultInventoryStockHistory) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateDefaultInventoryStockHistory) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].StockID,
		r.rows[0].Change,
	}, nil
}

func (r iteratorForCreateDefaultInventoryStockHistory) Err() error {
	return nil
}

func (q *Queries) CreateDefaultInventoryStockHistory(ctx context.Context, arg []CreateDefaultInventoryStockHistoryParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"inventory", "stock_history"}, []string{"stock_id", "change"}, &iteratorForCreateDefaultInventoryStockHistory{rows: arg})
}

// iteratorForCreateDefaultOrderBase implements pgx.CopyFromSource.
type iteratorForCreateDefaultOrderBase struct {
	rows                 []CreateDefaultOrderBaseParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateDefaultOrderBase) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateDefaultOrderBase) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].Code,
		r.rows[0].CustomerID,
		r.rows[0].PaymentMethod,
		r.rows[0].Status,
		r.rows[0].Address,
		r.rows[0].DateUpdated,
	}, nil
}

func (r iteratorForCreateDefaultOrderBase) Err() error {
	return nil
}

func (q *Queries) CreateDefaultOrderBase(ctx context.Context, arg []CreateDefaultOrderBaseParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"order", "base"}, []string{"code", "customer_id", "payment_method", "status", "address", "date_updated"}, &iteratorForCreateDefaultOrderBase{rows: arg})
}

// iteratorForCreateDefaultOrderInvoice implements pgx.CopyFromSource.
type iteratorForCreateDefaultOrderInvoice struct {
	rows                 []CreateDefaultOrderInvoiceParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateDefaultOrderInvoice) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateDefaultOrderInvoice) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].Code,
		r.rows[0].Type,
		r.rows[0].RefType,
		r.rows[0].RefID,
		r.rows[0].SellerAccountID,
		r.rows[0].BuyerAccountID,
		r.rows[0].Status,
		r.rows[0].PaymentMethod,
		r.rows[0].Address,
		r.rows[0].Phone,
		r.rows[0].Subtotal,
		r.rows[0].Total,
		r.rows[0].FileRsID,
		r.rows[0].Hash,
		r.rows[0].PrevHash,
	}, nil
}

func (r iteratorForCreateDefaultOrderInvoice) Err() error {
	return nil
}

func (q *Queries) CreateDefaultOrderInvoice(ctx context.Context, arg []CreateDefaultOrderInvoiceParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"order", "invoice"}, []string{"code", "type", "ref_type", "ref_id", "seller_account_id", "buyer_account_id", "status", "payment_method", "address", "phone", "subtotal", "total", "file_rs_id", "hash", "prev_hash"}, &iteratorForCreateDefaultOrderInvoice{rows: arg})
}

// iteratorForCreateDefaultOrderInvoiceItem implements pgx.CopyFromSource.
type iteratorForCreateDefaultOrderInvoiceItem struct {
	rows                 []CreateDefaultOrderInvoiceItemParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateDefaultOrderInvoiceItem) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateDefaultOrderInvoiceItem) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].InvoiceID,
		r.rows[0].Snapshot,
		r.rows[0].Quantity,
		r.rows[0].UnitPrice,
		r.rows[0].Subtotal,
		r.rows[0].Total,
	}, nil
}

func (r iteratorForCreateDefaultOrderInvoiceItem) Err() error {
	return nil
}

func (q *Queries) CreateDefaultOrderInvoiceItem(ctx context.Context, arg []CreateDefaultOrderInvoiceItemParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"order", "invoice_item"}, []string{"invoice_id", "snapshot", "quantity", "unit_price", "subtotal", "total"}, &iteratorForCreateDefaultOrderInvoiceItem{rows: arg})
}

// iteratorForCreateDefaultOrderItem implements pgx.CopyFromSource.
type iteratorForCreateDefaultOrderItem struct {
	rows                 []CreateDefaultOrderItemParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateDefaultOrderItem) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateDefaultOrderItem) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].Code,
		r.rows[0].OrderID,
		r.rows[0].SkuID,
		r.rows[0].Quantity,
	}, nil
}

func (r iteratorForCreateDefaultOrderItem) Err() error {
	return nil
}

func (q *Queries) CreateDefaultOrderItem(ctx context.Context, arg []CreateDefaultOrderItemParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"order", "item"}, []string{"code", "order_id", "sku_id", "quantity"}, &iteratorForCreateDefaultOrderItem{rows: arg})
}

// iteratorForCreateDefaultOrderItemSerial implements pgx.CopyFromSource.
type iteratorForCreateDefaultOrderItemSerial struct {
	rows                 []CreateDefaultOrderItemSerialParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateDefaultOrderItemSerial) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateDefaultOrderItemSerial) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].OrderItemID,
		r.rows[0].ProductSerialID,
	}, nil
}

func (r iteratorForCreateDefaultOrderItemSerial) Err() error {
	return nil
}

func (q *Queries) CreateDefaultOrderItemSerial(ctx context.Context, arg []CreateDefaultOrderItemSerialParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"order", "item_serial"}, []string{"order_item_id", "product_serial_id"}, &iteratorForCreateDefaultOrderItemSerial{rows: arg})
}

// iteratorForCreateDefaultOrderRefund implements pgx.CopyFromSource.
type iteratorForCreateDefaultOrderRefund struct {
	rows                 []CreateDefaultOrderRefundParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateDefaultOrderRefund) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateDefaultOrderRefund) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].Code,
		r.rows[0].OrderItemID,
		r.rows[0].ReviewedByID,
		r.rows[0].Method,
		r.rows[0].Status,
		r.rows[0].Reason,
		r.rows[0].Address,
	}, nil
}

func (r iteratorForCreateDefaultOrderRefund) Err() error {
	return nil
}

func (q *Queries) CreateDefaultOrderRefund(ctx context.Context, arg []CreateDefaultOrderRefundParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"order", "refund"}, []string{"code", "order_item_id", "reviewed_by_id", "method", "status", "reason", "address"}, &iteratorForCreateDefaultOrderRefund{rows: arg})
}

// iteratorForCreateDefaultOrderRefundDispute implements pgx.CopyFromSource.
type iteratorForCreateDefaultOrderRefundDispute struct {
	rows                 []CreateDefaultOrderRefundDisputeParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateDefaultOrderRefundDispute) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateDefaultOrderRefundDispute) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].Code,
		r.rows[0].RefundID,
		r.rows[0].IssuedByID,
		r.rows[0].Reason,
		r.rows[0].DateUpdated,
	}, nil
}

func (r iteratorForCreateDefaultOrderRefundDispute) Err() error {
	return nil
}

func (q *Queries) CreateDefaultOrderRefundDispute(ctx context.Context, arg []CreateDefaultOrderRefundDisputeParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"order", "refund_dispute"}, []string{"code", "refund_id", "issued_by_id", "reason", "date_updated"}, &iteratorForCreateDefaultOrderRefundDispute{rows: arg})
}

// iteratorForCreateDefaultOrderVnpay implements pgx.CopyFromSource.
type iteratorForCreateDefaultOrderVnpay struct {
	rows                 []CreateDefaultOrderVnpayParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateDefaultOrderVnpay) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateDefaultOrderVnpay) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].ID,
		r.rows[0].VnpAmount,
		r.rows[0].VnpBankCode,
		r.rows[0].VnpCardType,
		r.rows[0].VnpOrderInfo,
		r.rows[0].VnpPayDate,
		r.rows[0].VnpResponseCode,
		r.rows[0].VnpSecureHash,
		r.rows[0].VnpTmnCode,
		r.rows[0].VnpTransactionNo,
		r.rows[0].VnpTransactionStatus,
		r.rows[0].VnpTxnRef,
	}, nil
}

func (r iteratorForCreateDefaultOrderVnpay) Err() error {
	return nil
}

func (q *Queries) CreateDefaultOrderVnpay(ctx context.Context, arg []CreateDefaultOrderVnpayParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"order", "vnpay"}, []string{"id", "vnp_Amount", "vnp_BankCode", "vnp_CardType", "vnp_OrderInfo", "vnp_PayDate", "vnp_ResponseCode", "vnp_SecureHash", "vnp_TmnCode", "vnp_TransactionNo", "vnp_TransactionStatus", "vnp_TxnRef"}, &iteratorForCreateDefaultOrderVnpay{rows: arg})
}

// iteratorForCreateDefaultPromotionBase implements pgx.CopyFromSource.
type iteratorForCreateDefaultPromotionBase struct {
	rows                 []CreateDefaultPromotionBaseParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateDefaultPromotionBase) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateDefaultPromotionBase) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].Code,
		r.rows[0].OwnerID,
		r.rows[0].RefType,
		r.rows[0].RefID,
		r.rows[0].Type,
		r.rows[0].Title,
		r.rows[0].Description,
		r.rows[0].DateEnded,
		r.rows[0].ScheduleTz,
		r.rows[0].ScheduleStart,
		r.rows[0].ScheduleDuration,
		r.rows[0].DateUpdated,
	}, nil
}

func (r iteratorForCreateDefaultPromotionBase) Err() error {
	return nil
}

func (q *Queries) CreateDefaultPromotionBase(ctx context.Context, arg []CreateDefaultPromotionBaseParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"promotion", "base"}, []string{"code", "owner_id", "ref_type", "ref_id", "type", "title", "description", "date_ended", "schedule_tz", "schedule_start", "schedule_duration", "date_updated"}, &iteratorForCreateDefaultPromotionBase{rows: arg})
}

// iteratorForCreateDefaultPromotionDiscount implements pgx.CopyFromSource.
type iteratorForCreateDefaultPromotionDiscount struct {
	rows                 []CreateDefaultPromotionDiscountParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateDefaultPromotionDiscount) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateDefaultPromotionDiscount) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].ID,
		r.rows[0].OrderWide,
		r.rows[0].DiscountPercent,
		r.rows[0].DiscountPrice,
	}, nil
}

func (r iteratorForCreateDefaultPromotionDiscount) Err() error {
	return nil
}

func (q *Queries) CreateDefaultPromotionDiscount(ctx context.Context, arg []CreateDefaultPromotionDiscountParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"promotion", "discount"}, []string{"id", "order_wide", "discount_percent", "discount_price"}, &iteratorForCreateDefaultPromotionDiscount{rows: arg})
}

// iteratorForCreateDefaultSharedResource implements pgx.CopyFromSource.
type iteratorForCreateDefaultSharedResource struct {
	rows                 []CreateDefaultSharedResourceParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateDefaultSharedResource) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateDefaultSharedResource) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].MimeType,
		r.rows[0].OwnerID,
		r.rows[0].OwnerType,
		r.rows[0].Url,
		r.rows[0].Order,
	}, nil
}

func (r iteratorForCreateDefaultSharedResource) Err() error {
	return nil
}

func (q *Queries) CreateDefaultSharedResource(ctx context.Context, arg []CreateDefaultSharedResourceParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"shared", "resource"}, []string{"mime_type", "owner_id", "owner_type", "url", "order"}, &iteratorForCreateDefaultSharedResource{rows: arg})
}

// iteratorForCreateDefaultSystemEvent implements pgx.CopyFromSource.
type iteratorForCreateDefaultSystemEvent struct {
	rows                 []CreateDefaultSystemEventParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateDefaultSystemEvent) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateDefaultSystemEvent) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].AccountID,
		r.rows[0].AggregateID,
		r.rows[0].AggregateType,
		r.rows[0].EventType,
		r.rows[0].Payload,
		r.rows[0].Version,
	}, nil
}

func (r iteratorForCreateDefaultSystemEvent) Err() error {
	return nil
}

func (q *Queries) CreateDefaultSystemEvent(ctx context.Context, arg []CreateDefaultSystemEventParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"system", "event"}, []string{"account_id", "aggregate_id", "aggregate_type", "event_type", "payload", "version"}, &iteratorForCreateDefaultSystemEvent{rows: arg})
}

// iteratorForCreateDefaultSystemSearchSync implements pgx.CopyFromSource.
type iteratorForCreateDefaultSystemSearchSync struct {
	rows                 []string
	skippedFirstNextCall bool
}

func (r *iteratorForCreateDefaultSystemSearchSync) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateDefaultSystemSearchSync) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0],
	}, nil
}

func (r iteratorForCreateDefaultSystemSearchSync) Err() error {
	return nil
}

func (q *Queries) CreateDefaultSystemSearchSync(ctx context.Context, name []string) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"system", "search_sync"}, []string{"name"}, &iteratorForCreateDefaultSystemSearchSync{rows: name})
}

// iteratorForCreateInventorySkuSerial implements pgx.CopyFromSource.
type iteratorForCreateInventorySkuSerial struct {
	rows                 []CreateInventorySkuSerialParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateInventorySkuSerial) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateInventorySkuSerial) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].SerialNumber,
		r.rows[0].SkuID,
		r.rows[0].Status,
		r.rows[0].DateCreated,
	}, nil
}

func (r iteratorForCreateInventorySkuSerial) Err() error {
	return nil
}

func (q *Queries) CreateInventorySkuSerial(ctx context.Context, arg []CreateInventorySkuSerialParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"inventory", "sku_serial"}, []string{"serial_number", "sku_id", "status", "date_created"}, &iteratorForCreateInventorySkuSerial{rows: arg})
}

// iteratorForCreateInventoryStock implements pgx.CopyFromSource.
type iteratorForCreateInventoryStock struct {
	rows                 []CreateInventoryStockParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateInventoryStock) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateInventoryStock) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].RefType,
		r.rows[0].RefID,
		r.rows[0].CurrentStock,
		r.rows[0].Sold,
		r.rows[0].DateCreated,
	}, nil
}

func (r iteratorForCreateInventoryStock) Err() error {
	return nil
}

func (q *Queries) CreateInventoryStock(ctx context.Context, arg []CreateInventoryStockParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"inventory", "stock"}, []string{"ref_type", "ref_id", "current_stock", "sold", "date_created"}, &iteratorForCreateInventoryStock{rows: arg})
}

// iteratorForCreateInventoryStockHistory implements pgx.CopyFromSource.
type iteratorForCreateInventoryStockHistory struct {
	rows                 []CreateInventoryStockHistoryParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateInventoryStockHistory) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateInventoryStockHistory) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].StockID,
		r.rows[0].Change,
		r.rows[0].DateCreated,
	}, nil
}

func (r iteratorForCreateInventoryStockHistory) Err() error {
	return nil
}

func (q *Queries) CreateInventoryStockHistory(ctx context.Context, arg []CreateInventoryStockHistoryParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"inventory", "stock_history"}, []string{"stock_id", "change", "date_created"}, &iteratorForCreateInventoryStockHistory{rows: arg})
}

// iteratorForCreateOrderBase implements pgx.CopyFromSource.
type iteratorForCreateOrderBase struct {
	rows                 []CreateOrderBaseParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateOrderBase) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateOrderBase) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].Code,
		r.rows[0].CustomerID,
		r.rows[0].PaymentMethod,
		r.rows[0].Status,
		r.rows[0].Address,
		r.rows[0].DateCreated,
		r.rows[0].DateUpdated,
	}, nil
}

func (r iteratorForCreateOrderBase) Err() error {
	return nil
}

func (q *Queries) CreateOrderBase(ctx context.Context, arg []CreateOrderBaseParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"order", "base"}, []string{"code", "customer_id", "payment_method", "status", "address", "date_created", "date_updated"}, &iteratorForCreateOrderBase{rows: arg})
}

// iteratorForCreateOrderInvoice implements pgx.CopyFromSource.
type iteratorForCreateOrderInvoice struct {
	rows                 []CreateOrderInvoiceParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateOrderInvoice) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateOrderInvoice) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].Code,
		r.rows[0].Type,
		r.rows[0].RefType,
		r.rows[0].RefID,
		r.rows[0].SellerAccountID,
		r.rows[0].BuyerAccountID,
		r.rows[0].Status,
		r.rows[0].PaymentMethod,
		r.rows[0].Address,
		r.rows[0].Phone,
		r.rows[0].Subtotal,
		r.rows[0].Total,
		r.rows[0].FileRsID,
		r.rows[0].DateCreated,
		r.rows[0].Hash,
		r.rows[0].PrevHash,
	}, nil
}

func (r iteratorForCreateOrderInvoice) Err() error {
	return nil
}

func (q *Queries) CreateOrderInvoice(ctx context.Context, arg []CreateOrderInvoiceParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"order", "invoice"}, []string{"code", "type", "ref_type", "ref_id", "seller_account_id", "buyer_account_id", "status", "payment_method", "address", "phone", "subtotal", "total", "file_rs_id", "date_created", "hash", "prev_hash"}, &iteratorForCreateOrderInvoice{rows: arg})
}

// iteratorForCreateOrderInvoiceItem implements pgx.CopyFromSource.
type iteratorForCreateOrderInvoiceItem struct {
	rows                 []CreateOrderInvoiceItemParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateOrderInvoiceItem) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateOrderInvoiceItem) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].InvoiceID,
		r.rows[0].Snapshot,
		r.rows[0].Quantity,
		r.rows[0].UnitPrice,
		r.rows[0].Subtotal,
		r.rows[0].Total,
	}, nil
}

func (r iteratorForCreateOrderInvoiceItem) Err() error {
	return nil
}

func (q *Queries) CreateOrderInvoiceItem(ctx context.Context, arg []CreateOrderInvoiceItemParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"order", "invoice_item"}, []string{"invoice_id", "snapshot", "quantity", "unit_price", "subtotal", "total"}, &iteratorForCreateOrderInvoiceItem{rows: arg})
}

// iteratorForCreateOrderItem implements pgx.CopyFromSource.
type iteratorForCreateOrderItem struct {
	rows                 []CreateOrderItemParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateOrderItem) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateOrderItem) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].Code,
		r.rows[0].OrderID,
		r.rows[0].SkuID,
		r.rows[0].Quantity,
	}, nil
}

func (r iteratorForCreateOrderItem) Err() error {
	return nil
}

func (q *Queries) CreateOrderItem(ctx context.Context, arg []CreateOrderItemParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"order", "item"}, []string{"code", "order_id", "sku_id", "quantity"}, &iteratorForCreateOrderItem{rows: arg})
}

// iteratorForCreateOrderItemSerial implements pgx.CopyFromSource.
type iteratorForCreateOrderItemSerial struct {
	rows                 []CreateOrderItemSerialParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateOrderItemSerial) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateOrderItemSerial) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].OrderItemID,
		r.rows[0].ProductSerialID,
	}, nil
}

func (r iteratorForCreateOrderItemSerial) Err() error {
	return nil
}

func (q *Queries) CreateOrderItemSerial(ctx context.Context, arg []CreateOrderItemSerialParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"order", "item_serial"}, []string{"order_item_id", "product_serial_id"}, &iteratorForCreateOrderItemSerial{rows: arg})
}

// iteratorForCreateOrderRefund implements pgx.CopyFromSource.
type iteratorForCreateOrderRefund struct {
	rows                 []CreateOrderRefundParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateOrderRefund) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateOrderRefund) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].Code,
		r.rows[0].OrderItemID,
		r.rows[0].ReviewedByID,
		r.rows[0].Method,
		r.rows[0].Status,
		r.rows[0].Reason,
		r.rows[0].Address,
		r.rows[0].DateCreated,
	}, nil
}

func (r iteratorForCreateOrderRefund) Err() error {
	return nil
}

func (q *Queries) CreateOrderRefund(ctx context.Context, arg []CreateOrderRefundParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"order", "refund"}, []string{"code", "order_item_id", "reviewed_by_id", "method", "status", "reason", "address", "date_created"}, &iteratorForCreateOrderRefund{rows: arg})
}

// iteratorForCreateOrderRefundDispute implements pgx.CopyFromSource.
type iteratorForCreateOrderRefundDispute struct {
	rows                 []CreateOrderRefundDisputeParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateOrderRefundDispute) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateOrderRefundDispute) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].Code,
		r.rows[0].RefundID,
		r.rows[0].IssuedByID,
		r.rows[0].Reason,
		r.rows[0].Status,
		r.rows[0].DateCreated,
		r.rows[0].DateUpdated,
	}, nil
}

func (r iteratorForCreateOrderRefundDispute) Err() error {
	return nil
}

func (q *Queries) CreateOrderRefundDispute(ctx context.Context, arg []CreateOrderRefundDisputeParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"order", "refund_dispute"}, []string{"code", "refund_id", "issued_by_id", "reason", "status", "date_created", "date_updated"}, &iteratorForCreateOrderRefundDispute{rows: arg})
}

// iteratorForCreateOrderVnpay implements pgx.CopyFromSource.
type iteratorForCreateOrderVnpay struct {
	rows                 []CreateOrderVnpayParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateOrderVnpay) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateOrderVnpay) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].ID,
		r.rows[0].VnpAmount,
		r.rows[0].VnpBankCode,
		r.rows[0].VnpCardType,
		r.rows[0].VnpOrderInfo,
		r.rows[0].VnpPayDate,
		r.rows[0].VnpResponseCode,
		r.rows[0].VnpSecureHash,
		r.rows[0].VnpTmnCode,
		r.rows[0].VnpTransactionNo,
		r.rows[0].VnpTransactionStatus,
		r.rows[0].VnpTxnRef,
	}, nil
}

func (r iteratorForCreateOrderVnpay) Err() error {
	return nil
}

func (q *Queries) CreateOrderVnpay(ctx context.Context, arg []CreateOrderVnpayParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"order", "vnpay"}, []string{"id", "vnp_Amount", "vnp_BankCode", "vnp_CardType", "vnp_OrderInfo", "vnp_PayDate", "vnp_ResponseCode", "vnp_SecureHash", "vnp_TmnCode", "vnp_TransactionNo", "vnp_TransactionStatus", "vnp_TxnRef"}, &iteratorForCreateOrderVnpay{rows: arg})
}

// iteratorForCreatePromotionBase implements pgx.CopyFromSource.
type iteratorForCreatePromotionBase struct {
	rows                 []CreatePromotionBaseParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreatePromotionBase) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreatePromotionBase) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].Code,
		r.rows[0].OwnerID,
		r.rows[0].RefType,
		r.rows[0].RefID,
		r.rows[0].Type,
		r.rows[0].Title,
		r.rows[0].Description,
		r.rows[0].IsActive,
		r.rows[0].DateStarted,
		r.rows[0].DateEnded,
		r.rows[0].ScheduleTz,
		r.rows[0].ScheduleStart,
		r.rows[0].ScheduleDuration,
		r.rows[0].DateCreated,
		r.rows[0].DateUpdated,
	}, nil
}

func (r iteratorForCreatePromotionBase) Err() error {
	return nil
}

func (q *Queries) CreatePromotionBase(ctx context.Context, arg []CreatePromotionBaseParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"promotion", "base"}, []string{"code", "owner_id", "ref_type", "ref_id", "type", "title", "description", "is_active", "date_started", "date_ended", "schedule_tz", "schedule_start", "schedule_duration", "date_created", "date_updated"}, &iteratorForCreatePromotionBase{rows: arg})
}

// iteratorForCreatePromotionDiscount implements pgx.CopyFromSource.
type iteratorForCreatePromotionDiscount struct {
	rows                 []CreatePromotionDiscountParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreatePromotionDiscount) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreatePromotionDiscount) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].ID,
		r.rows[0].OrderWide,
		r.rows[0].MinSpend,
		r.rows[0].MaxDiscount,
		r.rows[0].DiscountPercent,
		r.rows[0].DiscountPrice,
	}, nil
}

func (r iteratorForCreatePromotionDiscount) Err() error {
	return nil
}

func (q *Queries) CreatePromotionDiscount(ctx context.Context, arg []CreatePromotionDiscountParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"promotion", "discount"}, []string{"id", "order_wide", "min_spend", "max_discount", "discount_percent", "discount_price"}, &iteratorForCreatePromotionDiscount{rows: arg})
}

// iteratorForCreateSharedResource implements pgx.CopyFromSource.
type iteratorForCreateSharedResource struct {
	rows                 []CreateSharedResourceParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateSharedResource) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateSharedResource) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].MimeType,
		r.rows[0].OwnerID,
		r.rows[0].OwnerType,
		r.rows[0].Url,
		r.rows[0].Order,
	}, nil
}

func (r iteratorForCreateSharedResource) Err() error {
	return nil
}

func (q *Queries) CreateSharedResource(ctx context.Context, arg []CreateSharedResourceParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"shared", "resource"}, []string{"mime_type", "owner_id", "owner_type", "url", "order"}, &iteratorForCreateSharedResource{rows: arg})
}

// iteratorForCreateSystemEvent implements pgx.CopyFromSource.
type iteratorForCreateSystemEvent struct {
	rows                 []CreateSystemEventParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateSystemEvent) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateSystemEvent) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].AccountID,
		r.rows[0].AggregateID,
		r.rows[0].AggregateType,
		r.rows[0].EventType,
		r.rows[0].Payload,
		r.rows[0].Version,
		r.rows[0].DateCreated,
	}, nil
}

func (r iteratorForCreateSystemEvent) Err() error {
	return nil
}

func (q *Queries) CreateSystemEvent(ctx context.Context, arg []CreateSystemEventParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"system", "event"}, []string{"account_id", "aggregate_id", "aggregate_type", "event_type", "payload", "version", "date_created"}, &iteratorForCreateSystemEvent{rows: arg})
}

// iteratorForCreateSystemSearchSync implements pgx.CopyFromSource.
type iteratorForCreateSystemSearchSync struct {
	rows                 []CreateSystemSearchSyncParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateSystemSearchSync) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateSystemSearchSync) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].Name,
		r.rows[0].LastSynced,
	}, nil
}

func (r iteratorForCreateSystemSearchSync) Err() error {
	return nil
}

func (q *Queries) CreateSystemSearchSync(ctx context.Context, arg []CreateSystemSearchSyncParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"system", "search_sync"}, []string{"name", "last_synced"}, &iteratorForCreateSystemSearchSync{rows: arg})
}
