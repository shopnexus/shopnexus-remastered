// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: promotion.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const listActivePromotion = `-- name: ListActivePromotion :many
SELECT id, code, owner_id, ref_type, ref_id, type, title, description, is_active, date_started, date_ended, schedule_tz, schedule_start, schedule_duration, date_created, date_updated
FROM promotion.base
WHERE is_active = true
  AND (date_ended IS NULL OR date_ended > NOW())
  AND ("ref_type" = ($1) OR $1 IS NULL)
  AND ("ref_id" = ANY($2) OR $2 IS NULL)
  AND ("type" = ANY($3) OR $3 IS NULL)
`

type ListActivePromotionParams struct {
	RefType []NullPromotionRefType `json:"ref_type"`
	RefID   pgtype.Int8            `json:"ref_id"`
	Type    []PromotionType        `json:"type"`
}

func (q *Queries) ListActivePromotion(ctx context.Context, arg ListActivePromotionParams) ([]PromotionBase, error) {
	rows, err := q.db.Query(ctx, listActivePromotion, arg.RefType, arg.RefID, arg.Type)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PromotionBase{}
	for rows.Next() {
		var i PromotionBase
		if err := rows.Scan(
			&i.ID,
			&i.Code,
			&i.OwnerID,
			&i.RefType,
			&i.RefID,
			&i.Type,
			&i.Title,
			&i.Description,
			&i.IsActive,
			&i.DateStarted,
			&i.DateEnded,
			&i.ScheduleTz,
			&i.ScheduleStart,
			&i.ScheduleDuration,
			&i.DateCreated,
			&i.DateUpdated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
