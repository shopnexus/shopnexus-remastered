networks:
  shopnexus-network:
    name: shopnexus-network
    external: false

volumes:
  postgres-backup-data:
  postgres-data:
  redis-data:
  kafka-data:
  es-data:
  server-data:


services:
  postgres:
    container_name: shopnexus-postgres
    image: postgres:17-alpine
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: shopnexus
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-peakshopnexuspassword}
      POSTGRES_DB: shopnexus
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - shopnexus-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U shopnexus -d shopnexus" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

#  postgres-backup:
#    container_name: shopnexus-postgres-backup
#    build:
#      context: .
#      dockerfile: postgres-backup/Dockerfile
#    volumes:
#      - postgres-backup-data:/backups
#      - /etc/localtime:/etc/localtime:ro
#    networks:
#      - shopnexus-network
#    depends_on:
#      postgres:
#        condition: service_healthy
#    restart: unless-stopped

  redis:
    container_name: shopnexus-redis
    image: redis:8-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - shopnexus-network
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-peaksehopnexuspassword}
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped

  kafka:
    container_name: shopnexus-kafka
    image: confluentinc/cp-kafka:latest
    networks:
      - shopnexus-network
    ports:
      - "9092:9092"
    volumes:
      - kafka-data:/data
    healthcheck:
      test: [ "CMD-SHELL", "kafka-broker-api-versions --bootstrap-server localhost:9092 || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    environment:
      # Required in KRaft mode
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:29093

      # Listener configuration
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://kafka:29092,CONTROLLER://kafka:29093,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      #      KAFKA_AUTO_OFFSET_RESET: earliest
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"  # Kafka will automatically create topics if needed.
      KAFKA_NUM_PARTITIONS: 3  # Default number of partitions for new topics.
      KAFKA_LOG_RETENTION_HOURS: 168  # Keep logs for 7 days.
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0  # No delay for consumer rebalancing.
      CLUSTER_ID: "Mk3OEYBSD34fcwNTJENDM2Qk"  # A unique ID for the Kafka cluster.



  kafka-ui:
    container_name: shopnexus-kafka-ui
    image: ghcr.io/kafbat/kafka-ui:latest
    networks:
      - shopnexus-network
    ports:
      - 8080:8080
    depends_on:
      - kafka
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:29092

  elasticsearch:
    container_name: shopnexus-elasticsearch
    image: elasticsearch:9.1.2
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
      - xpack.monitoring.collection.enabled=true
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - es-data:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
    networks:
      - shopnexus-network
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  kibana:
    container_name: shopnexus-kibana
    image: kibana:9.1.2
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
      - 5601:5601
    networks:
      - shopnexus-network
    depends_on:
      - elasticsearch
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:5601/api/status || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped

#  server:
#    container_name: shopnexus-server
#    build:
#      context: .. # Context from root of the project
#      dockerfile: docker/server/Dockerfile
#    ports:
#      - "50051:50051"
#    depends_on:
#      - kafka
#      - postgres
#      - redis
#    networks:
#      - shopnexus-network
#    volumes:
#      - server-data:/data
#    healthcheck:
#      test: [ "CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:50051/healthz" ]
#      interval: 10s
#      timeout: 5s
#      retries: 5
#      start_period: 10s
#    restart: unless-stopped

