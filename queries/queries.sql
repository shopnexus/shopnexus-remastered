-- Code generated by tool/main.go. DO NOT EDIT.
-- This file contains all queries for the database schema.


-- ========================================

-- Queries for table: account.account

-- ========================================

-- name: GetAccount :one
SELECT *
FROM "account"."account"
WHERE ("id" = $1) OR ("code" = $2) OR ("phone" = $3) OR ("email" = $4) OR ("username" = $5);

-- name: CountAccount :one
SELECT COUNT(*)
FROM "account"."account"
WHERE (
    ("id" = sqlc.narg('id') OR sqlc.narg('id') IS NULL) AND
    ("code" = sqlc.narg('code') OR sqlc.narg('code') IS NULL) AND
    ("type" = sqlc.narg('type') OR sqlc.narg('type') IS NULL) AND
    ("status" = sqlc.narg('status') OR sqlc.narg('status') IS NULL) AND
    ("phone" = sqlc.narg('phone') OR sqlc.narg('phone') IS NULL) AND
    ("email" = sqlc.narg('email') OR sqlc.narg('email') IS NULL) AND
    ("username" = sqlc.narg('username') OR sqlc.narg('username') IS NULL) AND
    ("password" = sqlc.narg('password') OR sqlc.narg('password') IS NULL) AND
    ("date_created" = sqlc.narg('date_created') OR sqlc.narg('date_created') IS NULL) AND
    ("date_updated" = sqlc.narg('date_updated') OR sqlc.narg('date_updated') IS NULL)
);

-- name: ListAccount :many
SELECT *
FROM "account"."account"
WHERE (
    ("id" = sqlc.narg('id') OR sqlc.narg('id') IS NULL) AND
    ("code" = sqlc.narg('code') OR sqlc.narg('code') IS NULL) AND
    ("type" = sqlc.narg('type') OR sqlc.narg('type') IS NULL) AND
    ("status" = sqlc.narg('status') OR sqlc.narg('status') IS NULL) AND
    ("phone" = sqlc.narg('phone') OR sqlc.narg('phone') IS NULL) AND
    ("email" = sqlc.narg('email') OR sqlc.narg('email') IS NULL) AND
    ("username" = sqlc.narg('username') OR sqlc.narg('username') IS NULL) AND
    ("password" = sqlc.narg('password') OR sqlc.narg('password') IS NULL) AND
    ("date_created" = sqlc.narg('date_created') OR sqlc.narg('date_created') IS NULL) AND
    ("date_updated" = sqlc.narg('date_updated') OR sqlc.narg('date_updated') IS NULL)
)
ORDER BY "date_created" DESC
LIMIT sqlc.arg('limit')
OFFSET sqlc.arg('offset');

-- name: CreateAccount :one
INSERT INTO "account"."account" ("code", "type", "status", "phone", "email", "username", "password", "date_created", "date_updated")
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
RETURNING *;

-- name: CreateDefaultAccount :one
INSERT INTO "account"."account" ("code", "type", "phone", "email", "username", "password")
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING *;

-- name: UpdateAccount :one
UPDATE "account"."account"
SET "code" = COALESCE(sqlc.narg('code'), "code"),
    "type" = COALESCE(sqlc.narg('type'), "type"),
    "status" = COALESCE(sqlc.narg('status'), "status"),
    "phone" = CASE WHEN sqlc.arg('null_phone')::bool = TRUE THEN NULL ELSE COALESCE(sqlc.narg('phone'), "phone") END,
    "email" = CASE WHEN sqlc.arg('null_email')::bool = TRUE THEN NULL ELSE COALESCE(sqlc.narg('email'), "email") END,
    "username" = CASE WHEN sqlc.arg('null_username')::bool = TRUE THEN NULL ELSE COALESCE(sqlc.narg('username'), "username") END,
    "password" = CASE WHEN sqlc.arg('null_password')::bool = TRUE THEN NULL ELSE COALESCE(sqlc.narg('password'), "password") END,
    "date_created" = COALESCE(sqlc.narg('date_created'), "date_created"),
    "date_updated" = COALESCE(sqlc.narg('date_updated'), "date_updated")
WHERE "id" = $1
RETURNING *;

-- name: DeleteAccount :exec
DELETE FROM "account"."account"
WHERE ("id" = $1) OR ("code" = $2) OR ("phone" = $3) OR ("email" = $4) OR ("username" = $5);

-- ========================================

-- Queries for table: account.profile

-- ========================================

-- name: GetProfile :one
SELECT *
FROM "account"."profile"
WHERE ("id" = $1) OR ("account_id" = $2) OR ("avatar_rs_id" = $3);

-- name: CountProfile :one
SELECT COUNT(*)
FROM "account"."profile"
WHERE (
    ("id" = sqlc.narg('id') OR sqlc.narg('id') IS NULL) AND
    ("account_id" = sqlc.narg('account_id') OR sqlc.narg('account_id') IS NULL) AND
    ("gender" = sqlc.narg('gender') OR sqlc.narg('gender') IS NULL) AND
    ("name" = sqlc.narg('name') OR sqlc.narg('name') IS NULL) AND
    ("date_of_birth" = sqlc.narg('date_of_birth') OR sqlc.narg('date_of_birth') IS NULL) AND
    ("avatar_rs_id" = sqlc.narg('avatar_rs_id') OR sqlc.narg('avatar_rs_id') IS NULL) AND
    ("email_verified" = sqlc.narg('email_verified') OR sqlc.narg('email_verified') IS NULL) AND
    ("phone_verified" = sqlc.narg('phone_verified') OR sqlc.narg('phone_verified') IS NULL) AND
    ("date_created" = sqlc.narg('date_created') OR sqlc.narg('date_created') IS NULL) AND
    ("date_updated" = sqlc.narg('date_updated') OR sqlc.narg('date_updated') IS NULL)
);

-- name: ListProfile :many
SELECT *
FROM "account"."profile"
WHERE (
    ("id" = sqlc.narg('id') OR sqlc.narg('id') IS NULL) AND
    ("account_id" = sqlc.narg('account_id') OR sqlc.narg('account_id') IS NULL) AND
    ("gender" = sqlc.narg('gender') OR sqlc.narg('gender') IS NULL) AND
    ("name" = sqlc.narg('name') OR sqlc.narg('name') IS NULL) AND
    ("date_of_birth" = sqlc.narg('date_of_birth') OR sqlc.narg('date_of_birth') IS NULL) AND
    ("avatar_rs_id" = sqlc.narg('avatar_rs_id') OR sqlc.narg('avatar_rs_id') IS NULL) AND
    ("email_verified" = sqlc.narg('email_verified') OR sqlc.narg('email_verified') IS NULL) AND
    ("phone_verified" = sqlc.narg('phone_verified') OR sqlc.narg('phone_verified') IS NULL) AND
    ("date_created" = sqlc.narg('date_created') OR sqlc.narg('date_created') IS NULL) AND
    ("date_updated" = sqlc.narg('date_updated') OR sqlc.narg('date_updated') IS NULL)
)
ORDER BY "date_created" DESC
LIMIT sqlc.arg('limit')
OFFSET sqlc.arg('offset');

-- name: CreateProfile :one
INSERT INTO "account"."profile" ("account_id", "gender", "name", "date_of_birth", "avatar_rs_id", "email_verified", "phone_verified", "date_created", "date_updated")
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
RETURNING *;

-- name: CreateDefaultProfile :one
INSERT INTO "account"."profile" ("account_id", "gender", "name", "date_of_birth", "avatar_rs_id")
VALUES ($1, $2, $3, $4, $5)
RETURNING *;

-- name: UpdateProfile :one
UPDATE "account"."profile"
SET "account_id" = COALESCE(sqlc.narg('account_id'), "account_id"),
    "gender" = CASE WHEN sqlc.arg('null_gender')::bool = TRUE THEN NULL ELSE COALESCE(sqlc.narg('gender'), "gender") END,
    "name" = CASE WHEN sqlc.arg('null_name')::bool = TRUE THEN NULL ELSE COALESCE(sqlc.narg('name'), "name") END,
    "date_of_birth" = CASE WHEN sqlc.arg('null_date_of_birth')::bool = TRUE THEN NULL ELSE COALESCE(sqlc.narg('date_of_birth'), "date_of_birth") END,
    "avatar_rs_id" = CASE WHEN sqlc.arg('null_avatar_rs_id')::bool = TRUE THEN NULL ELSE COALESCE(sqlc.narg('avatar_rs_id'), "avatar_rs_id") END,
    "email_verified" = COALESCE(sqlc.narg('email_verified'), "email_verified"),
    "phone_verified" = COALESCE(sqlc.narg('phone_verified'), "phone_verified"),
    "date_created" = COALESCE(sqlc.narg('date_created'), "date_created"),
    "date_updated" = COALESCE(sqlc.narg('date_updated'), "date_updated")
WHERE "id" = $1
RETURNING *;

-- name: DeleteProfile :exec
DELETE FROM "account"."profile"
WHERE ("id" = $1) OR ("account_id" = $2) OR ("avatar_rs_id" = $3);

-- ========================================

-- Queries for table: account.customer

-- ========================================

-- name: GetCustomer :one
SELECT *
FROM "account"."customer"
WHERE ("id" = $1) OR ("account_id" = $2);

-- name: CountCustomer :one
SELECT COUNT(*)
FROM "account"."customer"
WHERE (
    ("id" = sqlc.narg('id') OR sqlc.narg('id') IS NULL) AND
    ("account_id" = sqlc.narg('account_id') OR sqlc.narg('account_id') IS NULL) AND
    ("default_address_id" = sqlc.narg('default_address_id') OR sqlc.narg('default_address_id') IS NULL) AND
    ("date_created" = sqlc.narg('date_created') OR sqlc.narg('date_created') IS NULL) AND
    ("date_updated" = sqlc.narg('date_updated') OR sqlc.narg('date_updated') IS NULL)
);

-- name: ListCustomer :many
SELECT *
FROM "account"."customer"
WHERE (
    ("id" = sqlc.narg('id') OR sqlc.narg('id') IS NULL) AND
    ("account_id" = sqlc.narg('account_id') OR sqlc.narg('account_id') IS NULL) AND
    ("default_address_id" = sqlc.narg('default_address_id') OR sqlc.narg('default_address_id') IS NULL) AND
    ("date_created" = sqlc.narg('date_created') OR sqlc.narg('date_created') IS NULL) AND
    ("date_updated" = sqlc.narg('date_updated') OR sqlc.narg('date_updated') IS NULL)
)
ORDER BY "date_created" DESC
LIMIT sqlc.arg('limit')
OFFSET sqlc.arg('offset');

-- name: CreateCustomer :one
INSERT INTO "account"."customer" ("account_id", "default_address_id", "date_created", "date_updated")
VALUES ($1, $2, $3, $4)
RETURNING *;

-- name: CreateDefaultCustomer :one
INSERT INTO "account"."customer" ("account_id", "default_address_id")
VALUES ($1, $2)
RETURNING *;

-- name: UpdateCustomer :one
UPDATE "account"."customer"
SET "account_id" = COALESCE(sqlc.narg('account_id'), "account_id"),
    "default_address_id" = CASE WHEN sqlc.arg('null_default_address_id')::bool = TRUE THEN NULL ELSE COALESCE(sqlc.narg('default_address_id'), "default_address_id") END,
    "date_created" = COALESCE(sqlc.narg('date_created'), "date_created"),
    "date_updated" = COALESCE(sqlc.narg('date_updated'), "date_updated")
WHERE "id" = $1
RETURNING *;

-- name: DeleteCustomer :exec
DELETE FROM "account"."customer"
WHERE ("id" = $1) OR ("account_id" = $2);

-- ========================================

-- Queries for table: account.vendor

-- ========================================

-- name: GetVendor :one
SELECT *
FROM "account"."vendor"
WHERE ("id" = $1) OR ("account_id" = $2);

-- name: CountVendor :one
SELECT COUNT(*)
FROM "account"."vendor"
WHERE (
    ("id" = sqlc.narg('id') OR sqlc.narg('id') IS NULL) AND
    ("account_id" = sqlc.narg('account_id') OR sqlc.narg('account_id') IS NULL)
);

-- name: ListVendor :many
SELECT *
FROM "account"."vendor"
WHERE (
    ("id" = sqlc.narg('id') OR sqlc.narg('id') IS NULL) AND
    ("account_id" = sqlc.narg('account_id') OR sqlc.narg('account_id') IS NULL)
)
ORDER BY "id"
LIMIT sqlc.arg('limit')
OFFSET sqlc.arg('offset');

-- name: CreateVendor :one
INSERT INTO "account"."vendor" ("account_id")
VALUES ($1)
RETURNING *;

-- name: CreateDefaultVendor :one
INSERT INTO "account"."vendor" ("account_id")
VALUES ($1)
RETURNING *;

-- name: UpdateVendor :one
UPDATE "account"."vendor"
SET "account_id" = COALESCE(sqlc.narg('account_id'), "account_id")
WHERE "id" = $1
RETURNING *;

-- name: DeleteVendor :exec
DELETE FROM "account"."vendor"
WHERE ("id" = $1) OR ("account_id" = $2);

-- ========================================

-- Queries for table: account.cart_item

-- ========================================

-- name: GetCartItem :one
SELECT *
FROM "account"."cart_item"
WHERE ("id" = $1) OR ("cart_id" = $2 AND "sku_id" = $3);

-- name: CountCartItem :one
SELECT COUNT(*)
FROM "account"."cart_item"
WHERE (
    ("id" = sqlc.narg('id') OR sqlc.narg('id') IS NULL) AND
    ("cart_id" = sqlc.narg('cart_id') OR sqlc.narg('cart_id') IS NULL) AND
    ("sku_id" = sqlc.narg('sku_id') OR sqlc.narg('sku_id') IS NULL) AND
    ("quantity" = sqlc.narg('quantity') OR sqlc.narg('quantity') IS NULL) AND
    ("date_created" = sqlc.narg('date_created') OR sqlc.narg('date_created') IS NULL) AND
    ("date_updated" = sqlc.narg('date_updated') OR sqlc.narg('date_updated') IS NULL)
);

-- name: ListCartItem :many
SELECT *
FROM "account"."cart_item"
WHERE (
    ("id" = sqlc.narg('id') OR sqlc.narg('id') IS NULL) AND
    ("cart_id" = sqlc.narg('cart_id') OR sqlc.narg('cart_id') IS NULL) AND
    ("sku_id" = sqlc.narg('sku_id') OR sqlc.narg('sku_id') IS NULL) AND
    ("quantity" = sqlc.narg('quantity') OR sqlc.narg('quantity') IS NULL) AND
    ("date_created" = sqlc.narg('date_created') OR sqlc.narg('date_created') IS NULL) AND
    ("date_updated" = sqlc.narg('date_updated') OR sqlc.narg('date_updated') IS NULL)
)
ORDER BY "date_created" DESC
LIMIT sqlc.arg('limit')
OFFSET sqlc.arg('offset');

-- name: CreateCartItem :one
INSERT INTO "account"."cart_item" ("cart_id", "sku_id", "quantity", "date_created", "date_updated")
VALUES ($1, $2, $3, $4, $5)
RETURNING *;

-- name: CreateDefaultCartItem :one
INSERT INTO "account"."cart_item" ("cart_id", "sku_id", "quantity")
VALUES ($1, $2, $3)
RETURNING *;

-- name: UpdateCartItem :one
UPDATE "account"."cart_item"
SET "cart_id" = COALESCE(sqlc.narg('cart_id'), "cart_id"),
    "sku_id" = COALESCE(sqlc.narg('sku_id'), "sku_id"),
    "quantity" = COALESCE(sqlc.narg('quantity'), "quantity"),
    "date_created" = COALESCE(sqlc.narg('date_created'), "date_created"),
    "date_updated" = COALESCE(sqlc.narg('date_updated'), "date_updated")
WHERE "id" = $1
RETURNING *;

-- name: DeleteCartItem :exec
DELETE FROM "account"."cart_item"
WHERE ("id" = $1) OR ("cart_id" = $2 AND "sku_id" = $3);

-- ========================================

-- Queries for table: account.address

-- ========================================

-- name: GetAddress :one
SELECT *
FROM "account"."address"
WHERE ("id" = $1) OR ("code" = $2);

-- name: CountAddress :one
SELECT COUNT(*)
FROM "account"."address"
WHERE (
    ("id" = sqlc.narg('id') OR sqlc.narg('id') IS NULL) AND
    ("code" = sqlc.narg('code') OR sqlc.narg('code') IS NULL) AND
    ("account_id" = sqlc.narg('account_id') OR sqlc.narg('account_id') IS NULL) AND
    ("type" = sqlc.narg('type') OR sqlc.narg('type') IS NULL) AND
    ("full_name" = sqlc.narg('full_name') OR sqlc.narg('full_name') IS NULL) AND
    ("phone" = sqlc.narg('phone') OR sqlc.narg('phone') IS NULL) AND
    ("phone_verified" = sqlc.narg('phone_verified') OR sqlc.narg('phone_verified') IS NULL) AND
    ("address_line" = sqlc.narg('address_line') OR sqlc.narg('address_line') IS NULL) AND
    ("city" = sqlc.narg('city') OR sqlc.narg('city') IS NULL) AND
    ("state_province" = sqlc.narg('state_province') OR sqlc.narg('state_province') IS NULL) AND
    ("country" = sqlc.narg('country') OR sqlc.narg('country') IS NULL) AND
    ("date_created" = sqlc.narg('date_created') OR sqlc.narg('date_created') IS NULL) AND
    ("date_updated" = sqlc.narg('date_updated') OR sqlc.narg('date_updated') IS NULL)
);

-- name: ListAddress :many
SELECT *
FROM "account"."address"
WHERE (
    ("id" = sqlc.narg('id') OR sqlc.narg('id') IS NULL) AND
    ("code" = sqlc.narg('code') OR sqlc.narg('code') IS NULL) AND
    ("account_id" = sqlc.narg('account_id') OR sqlc.narg('account_id') IS NULL) AND
    ("type" = sqlc.narg('type') OR sqlc.narg('type') IS NULL) AND
    ("full_name" = sqlc.narg('full_name') OR sqlc.narg('full_name') IS NULL) AND
    ("phone" = sqlc.narg('phone') OR sqlc.narg('phone') IS NULL) AND
    ("phone_verified" = sqlc.narg('phone_verified') OR sqlc.narg('phone_verified') IS NULL) AND
    ("address_line" = sqlc.narg('address_line') OR sqlc.narg('address_line') IS NULL) AND
    ("city" = sqlc.narg('city') OR sqlc.narg('city') IS NULL) AND
    ("state_province" = sqlc.narg('state_province') OR sqlc.narg('state_province') IS NULL) AND
    ("country" = sqlc.narg('country') OR sqlc.narg('country') IS NULL) AND
    ("date_created" = sqlc.narg('date_created') OR sqlc.narg('date_created') IS NULL) AND
    ("date_updated" = sqlc.narg('date_updated') OR sqlc.narg('date_updated') IS NULL)
)
ORDER BY "date_created" DESC
LIMIT sqlc.arg('limit')
OFFSET sqlc.arg('offset');

-- name: CreateAddress :one
INSERT INTO "account"."address" ("code", "account_id", "type", "full_name", "phone", "phone_verified", "address_line", "city", "state_province", "country", "date_created", "date_updated")
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12)
RETURNING *;

-- name: CreateDefaultAddress :one
INSERT INTO "account"."address" ("code", "account_id", "full_name", "phone", "address_line", "city", "state_province", "country")
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING *;

-- name: UpdateAddress :one
UPDATE "account"."address"
SET "code" = COALESCE(sqlc.narg('code'), "code"),
    "account_id" = COALESCE(sqlc.narg('account_id'), "account_id"),
    "type" = COALESCE(sqlc.narg('type'), "type"),
    "full_name" = COALESCE(sqlc.narg('full_name'), "full_name"),
    "phone" = COALESCE(sqlc.narg('phone'), "phone"),
    "phone_verified" = COALESCE(sqlc.narg('phone_verified'), "phone_verified"),
    "address_line" = COALESCE(sqlc.narg('address_line'), "address_line"),
    "city" = COALESCE(sqlc.narg('city'), "city"),
    "state_province" = COALESCE(sqlc.narg('state_province'), "state_province"),
    "country" = COALESCE(sqlc.narg('country'), "country"),
    "date_created" = COALESCE(sqlc.narg('date_created'), "date_created"),
    "date_updated" = COALESCE(sqlc.narg('date_updated'), "date_updated")
WHERE "id" = $1
RETURNING *;

-- name: DeleteAddress :exec
DELETE FROM "account"."address"
WHERE ("id" = $1) OR ("code" = $2);

-- ========================================

-- Queries for table: catalog.brand

-- ========================================

-- name: GetBrand :one
SELECT *
FROM "catalog"."brand"
WHERE ("id" = $1) OR ("code" = $2);

-- name: CountBrand :one
SELECT COUNT(*)
FROM "catalog"."brand"
WHERE (
    ("id" = sqlc.narg('id') OR sqlc.narg('id') IS NULL) AND
    ("code" = sqlc.narg('code') OR sqlc.narg('code') IS NULL)
);

-- name: ListBrand :many
SELECT *
FROM "catalog"."brand"
WHERE (
    ("id" = sqlc.narg('id') OR sqlc.narg('id') IS NULL) AND
    ("code" = sqlc.narg('code') OR sqlc.narg('code') IS NULL)
)
ORDER BY "id"
LIMIT sqlc.arg('limit')
OFFSET sqlc.arg('offset');

-- name: CreateBrand :one
INSERT INTO "catalog"."brand" ("code", "name", "description")
VALUES ($1, $2, $3)
RETURNING *;

-- name: CreateDefaultBrand :one
INSERT INTO "catalog"."brand" ("code", "name", "description")
VALUES ($1, $2, $3)
RETURNING *;

-- name: UpdateBrand :one
UPDATE "catalog"."brand"
SET "code" = COALESCE(sqlc.narg('code'), "code"),
    "name" = COALESCE(sqlc.narg('name'), "name"),
    "description" = COALESCE(sqlc.narg('description'), "description")
WHERE "id" = $1
RETURNING *;

-- name: DeleteBrand :exec
DELETE FROM "catalog"."brand"
WHERE ("id" = $1) OR ("code" = $2);

-- ========================================

-- Queries for table: catalog.category

-- ========================================

-- name: GetCategory :one
SELECT *
FROM "catalog"."category"
WHERE ("id" = $1) OR ("name" = $2);

-- name: CountCategory :one
SELECT COUNT(*)
FROM "catalog"."category"
WHERE (
    ("id" = sqlc.narg('id') OR sqlc.narg('id') IS NULL) AND
    ("name" = sqlc.narg('name') OR sqlc.narg('name') IS NULL) AND
    ("parent_id" = sqlc.narg('parent_id') OR sqlc.narg('parent_id') IS NULL)
);

-- name: ListCategory :many
SELECT *
FROM "catalog"."category"
WHERE (
    ("id" = sqlc.narg('id') OR sqlc.narg('id') IS NULL) AND
    ("name" = sqlc.narg('name') OR sqlc.narg('name') IS NULL) AND
    ("parent_id" = sqlc.narg('parent_id') OR sqlc.narg('parent_id') IS NULL)
)
ORDER BY "id"
LIMIT sqlc.arg('limit')
OFFSET sqlc.arg('offset');

-- name: CreateCategory :one
INSERT INTO "catalog"."category" ("name", "description", "parent_id")
VALUES ($1, $2, $3)
RETURNING *;

-- name: CreateDefaultCategory :one
INSERT INTO "catalog"."category" ("name", "parent_id")
VALUES ($1, $2)
RETURNING *;

-- name: UpdateCategory :one
UPDATE "catalog"."category"
SET "name" = COALESCE(sqlc.narg('name'), "name"),
    "description" = COALESCE(sqlc.narg('description'), "description"),
    "parent_id" = CASE WHEN sqlc.arg('null_parent_id')::bool = TRUE THEN NULL ELSE COALESCE(sqlc.narg('parent_id'), "parent_id") END
WHERE "id" = $1
RETURNING *;

-- name: DeleteCategory :exec
DELETE FROM "catalog"."category"
WHERE ("id" = $1) OR ("name" = $2);

-- ========================================

-- Queries for table: catalog.product_spu

-- ========================================

-- name: GetProductSpu :one
SELECT *
FROM "catalog"."product_spu"
WHERE ("id" = $1) OR ("code" = $2);

-- name: CountProductSpu :one
SELECT COUNT(*)
FROM "catalog"."product_spu"
WHERE (
    ("id" = sqlc.narg('id') OR sqlc.narg('id') IS NULL) AND
    ("code" = sqlc.narg('code') OR sqlc.narg('code') IS NULL) AND
    ("account_id" = sqlc.narg('account_id') OR sqlc.narg('account_id') IS NULL) AND
    ("category_id" = sqlc.narg('category_id') OR sqlc.narg('category_id') IS NULL) AND
    ("brand_id" = sqlc.narg('brand_id') OR sqlc.narg('brand_id') IS NULL) AND
    ("is_active" = sqlc.narg('is_active') OR sqlc.narg('is_active') IS NULL) AND
    ("date_manufactured" = sqlc.narg('date_manufactured') OR sqlc.narg('date_manufactured') IS NULL) AND
    ("date_created" = sqlc.narg('date_created') OR sqlc.narg('date_created') IS NULL) AND
    ("date_updated" = sqlc.narg('date_updated') OR sqlc.narg('date_updated') IS NULL) AND
    ("date_deleted" = sqlc.narg('date_deleted') OR sqlc.narg('date_deleted') IS NULL)
);

-- name: ListProductSpu :many
SELECT *
FROM "catalog"."product_spu"
WHERE (
    ("id" = sqlc.narg('id') OR sqlc.narg('id') IS NULL) AND
    ("code" = sqlc.narg('code') OR sqlc.narg('code') IS NULL) AND
    ("account_id" = sqlc.narg('account_id') OR sqlc.narg('account_id') IS NULL) AND
    ("category_id" = sqlc.narg('category_id') OR sqlc.narg('category_id') IS NULL) AND
    ("brand_id" = sqlc.narg('brand_id') OR sqlc.narg('brand_id') IS NULL) AND
    ("is_active" = sqlc.narg('is_active') OR sqlc.narg('is_active') IS NULL) AND
    ("date_manufactured" = sqlc.narg('date_manufactured') OR sqlc.narg('date_manufactured') IS NULL) AND
    ("date_created" = sqlc.narg('date_created') OR sqlc.narg('date_created') IS NULL) AND
    ("date_updated" = sqlc.narg('date_updated') OR sqlc.narg('date_updated') IS NULL) AND
    ("date_deleted" = sqlc.narg('date_deleted') OR sqlc.narg('date_deleted') IS NULL)
)
ORDER BY "date_created" DESC
LIMIT sqlc.arg('limit')
OFFSET sqlc.arg('offset');

-- name: CreateProductSpu :one
INSERT INTO "catalog"."product_spu" ("code", "account_id", "category_id", "brand_id", "name", "description", "is_active", "date_manufactured", "date_created", "date_updated", "date_deleted")
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
RETURNING *;

-- name: CreateDefaultProductSpu :one
INSERT INTO "catalog"."product_spu" ("code", "account_id", "category_id", "brand_id", "name", "description", "date_manufactured", "date_deleted")
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING *;

-- name: UpdateProductSpu :one
UPDATE "catalog"."product_spu"
SET "code" = COALESCE(sqlc.narg('code'), "code"),
    "account_id" = COALESCE(sqlc.narg('account_id'), "account_id"),
    "category_id" = COALESCE(sqlc.narg('category_id'), "category_id"),
    "brand_id" = COALESCE(sqlc.narg('brand_id'), "brand_id"),
    "name" = COALESCE(sqlc.narg('name'), "name"),
    "description" = COALESCE(sqlc.narg('description'), "description"),
    "is_active" = COALESCE(sqlc.narg('is_active'), "is_active"),
    "date_manufactured" = COALESCE(sqlc.narg('date_manufactured'), "date_manufactured"),
    "date_created" = COALESCE(sqlc.narg('date_created'), "date_created"),
    "date_updated" = COALESCE(sqlc.narg('date_updated'), "date_updated"),
    "date_deleted" = CASE WHEN sqlc.arg('null_date_deleted')::bool = TRUE THEN NULL ELSE COALESCE(sqlc.narg('date_deleted'), "date_deleted") END
WHERE "id" = $1
RETURNING *;

-- name: DeleteProductSpu :exec
DELETE FROM "catalog"."product_spu"
WHERE ("id" = $1) OR ("code" = $2);

-- ========================================

-- Queries for table: catalog.product_sku

-- ========================================

-- name: GetProductSku :one
SELECT *
FROM "catalog"."product_sku"
WHERE ("id" = $1) OR ("code" = $2);

-- name: CountProductSku :one
SELECT COUNT(*)
FROM "catalog"."product_sku"
WHERE (
    ("id" = sqlc.narg('id') OR sqlc.narg('id') IS NULL) AND
    ("code" = sqlc.narg('code') OR sqlc.narg('code') IS NULL) AND
    ("spu_id" = sqlc.narg('spu_id') OR sqlc.narg('spu_id') IS NULL) AND
    ("price" = sqlc.narg('price') OR sqlc.narg('price') IS NULL) AND
    ("can_combine" = sqlc.narg('can_combine') OR sqlc.narg('can_combine') IS NULL) AND
    ("date_created" = sqlc.narg('date_created') OR sqlc.narg('date_created') IS NULL) AND
    ("date_deleted" = sqlc.narg('date_deleted') OR sqlc.narg('date_deleted') IS NULL)
);

-- name: ListProductSku :many
SELECT *
FROM "catalog"."product_sku"
WHERE (
    ("id" = sqlc.narg('id') OR sqlc.narg('id') IS NULL) AND
    ("code" = sqlc.narg('code') OR sqlc.narg('code') IS NULL) AND
    ("spu_id" = sqlc.narg('spu_id') OR sqlc.narg('spu_id') IS NULL) AND
    ("price" = sqlc.narg('price') OR sqlc.narg('price') IS NULL) AND
    ("can_combine" = sqlc.narg('can_combine') OR sqlc.narg('can_combine') IS NULL) AND
    ("date_created" = sqlc.narg('date_created') OR sqlc.narg('date_created') IS NULL) AND
    ("date_deleted" = sqlc.narg('date_deleted') OR sqlc.narg('date_deleted') IS NULL)
)
ORDER BY "date_created" DESC
LIMIT sqlc.arg('limit')
OFFSET sqlc.arg('offset');

-- name: CreateProductSku :one
INSERT INTO "catalog"."product_sku" ("code", "spu_id", "price", "can_combine", "date_created", "date_deleted")
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING *;

-- name: CreateDefaultProductSku :one
INSERT INTO "catalog"."product_sku" ("code", "spu_id", "price", "date_deleted")
VALUES ($1, $2, $3, $4)
RETURNING *;

-- name: UpdateProductSku :one
UPDATE "catalog"."product_sku"
SET "code" = COALESCE(sqlc.narg('code'), "code"),
    "spu_id" = COALESCE(sqlc.narg('spu_id'), "spu_id"),
    "price" = COALESCE(sqlc.narg('price'), "price"),
    "can_combine" = COALESCE(sqlc.narg('can_combine'), "can_combine"),
    "date_created" = COALESCE(sqlc.narg('date_created'), "date_created"),
    "date_deleted" = CASE WHEN sqlc.arg('null_date_deleted')::bool = TRUE THEN NULL ELSE COALESCE(sqlc.narg('date_deleted'), "date_deleted") END
WHERE "id" = $1
RETURNING *;

-- name: DeleteProductSku :exec
DELETE FROM "catalog"."product_sku"
WHERE ("id" = $1) OR ("code" = $2);

-- ========================================

-- Queries for table: catalog.product_sku_attribute

-- ========================================

-- name: GetProductSkuAttribute :one
SELECT *
FROM "catalog"."product_sku_attribute"
WHERE ("id" = $1) OR ("code" = $2);

-- name: CountProductSkuAttribute :one
SELECT COUNT(*)
FROM "catalog"."product_sku_attribute"
WHERE (
    ("id" = sqlc.narg('id') OR sqlc.narg('id') IS NULL) AND
    ("code" = sqlc.narg('code') OR sqlc.narg('code') IS NULL) AND
    ("sku_id" = sqlc.narg('sku_id') OR sqlc.narg('sku_id') IS NULL) AND
    ("name" = sqlc.narg('name') OR sqlc.narg('name') IS NULL) AND
    ("value" = sqlc.narg('value') OR sqlc.narg('value') IS NULL) AND
    ("date_created" = sqlc.narg('date_created') OR sqlc.narg('date_created') IS NULL) AND
    ("date_updated" = sqlc.narg('date_updated') OR sqlc.narg('date_updated') IS NULL)
);

-- name: ListProductSkuAttribute :many
SELECT *
FROM "catalog"."product_sku_attribute"
WHERE (
    ("id" = sqlc.narg('id') OR sqlc.narg('id') IS NULL) AND
    ("code" = sqlc.narg('code') OR sqlc.narg('code') IS NULL) AND
    ("sku_id" = sqlc.narg('sku_id') OR sqlc.narg('sku_id') IS NULL) AND
    ("name" = sqlc.narg('name') OR sqlc.narg('name') IS NULL) AND
    ("value" = sqlc.narg('value') OR sqlc.narg('value') IS NULL) AND
    ("date_created" = sqlc.narg('date_created') OR sqlc.narg('date_created') IS NULL) AND
    ("date_updated" = sqlc.narg('date_updated') OR sqlc.narg('date_updated') IS NULL)
)
ORDER BY "date_created" DESC
LIMIT sqlc.arg('limit')
OFFSET sqlc.arg('offset');

-- name: CreateProductSkuAttribute :one
INSERT INTO "catalog"."product_sku_attribute" ("code", "sku_id", "name", "value", "date_created", "date_updated")
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING *;

-- name: CreateDefaultProductSkuAttribute :one
INSERT INTO "catalog"."product_sku_attribute" ("code", "sku_id", "name", "value")
VALUES ($1, $2, $3, $4)
RETURNING *;

-- name: UpdateProductSkuAttribute :one
UPDATE "catalog"."product_sku_attribute"
SET "code" = COALESCE(sqlc.narg('code'), "code"),
    "sku_id" = COALESCE(sqlc.narg('sku_id'), "sku_id"),
    "name" = COALESCE(sqlc.narg('name'), "name"),
    "value" = COALESCE(sqlc.narg('value'), "value"),
    "date_created" = COALESCE(sqlc.narg('date_created'), "date_created"),
    "date_updated" = COALESCE(sqlc.narg('date_updated'), "date_updated")
WHERE "id" = $1
RETURNING *;

-- name: DeleteProductSkuAttribute :exec
DELETE FROM "catalog"."product_sku_attribute"
WHERE ("id" = $1) OR ("code" = $2);

-- ========================================

-- Queries for table: catalog.tag

-- ========================================

-- name: GetTag :one
SELECT *
FROM "catalog"."tag"
WHERE ("id" = $1) OR ("tag" = $2);

-- name: CountTag :one
SELECT COUNT(*)
FROM "catalog"."tag"
WHERE (
    ("id" = sqlc.narg('id') OR sqlc.narg('id') IS NULL) AND
    ("tag" = sqlc.narg('tag') OR sqlc.narg('tag') IS NULL)
);

-- name: ListTag :many
SELECT *
FROM "catalog"."tag"
WHERE (
    ("id" = sqlc.narg('id') OR sqlc.narg('id') IS NULL) AND
    ("tag" = sqlc.narg('tag') OR sqlc.narg('tag') IS NULL)
)
ORDER BY "id"
LIMIT sqlc.arg('limit')
OFFSET sqlc.arg('offset');

-- name: CreateTag :one
INSERT INTO "catalog"."tag" ("tag", "description")
VALUES ($1, $2)
RETURNING *;

-- name: CreateDefaultTag :one
INSERT INTO "catalog"."tag" ("tag")
VALUES ($1)
RETURNING *;

-- name: UpdateTag :one
UPDATE "catalog"."tag"
SET "tag" = COALESCE(sqlc.narg('tag'), "tag"),
    "description" = COALESCE(sqlc.narg('description'), "description")
WHERE "id" = $1
RETURNING *;

-- name: DeleteTag :exec
DELETE FROM "catalog"."tag"
WHERE ("id" = $1) OR ("tag" = $2);

-- ========================================

-- Queries for table: catalog.product_spu_tag

-- ========================================

-- name: GetProductSpuTag :one
SELECT *
FROM "catalog"."product_spu_tag"
WHERE ("id" = $1) OR ("spu_id" = $2 AND "tag_id" = $3);

-- name: CountProductSpuTag :one
SELECT COUNT(*)
FROM "catalog"."product_spu_tag"
WHERE (
    ("id" = sqlc.narg('id') OR sqlc.narg('id') IS NULL) AND
    ("spu_id" = sqlc.narg('spu_id') OR sqlc.narg('spu_id') IS NULL) AND
    ("tag_id" = sqlc.narg('tag_id') OR sqlc.narg('tag_id') IS NULL)
);

-- name: ListProductSpuTag :many
SELECT *
FROM "catalog"."product_spu_tag"
WHERE (
    ("id" = sqlc.narg('id') OR sqlc.narg('id') IS NULL) AND
    ("spu_id" = sqlc.narg('spu_id') OR sqlc.narg('spu_id') IS NULL) AND
    ("tag_id" = sqlc.narg('tag_id') OR sqlc.narg('tag_id') IS NULL)
)
ORDER BY "id"
LIMIT sqlc.arg('limit')
OFFSET sqlc.arg('offset');

-- name: CreateProductSpuTag :one
INSERT INTO "catalog"."product_spu_tag" ("spu_id", "tag_id")
VALUES ($1, $2)
RETURNING *;

-- name: CreateDefaultProductSpuTag :one
INSERT INTO "catalog"."product_spu_tag" ("spu_id", "tag_id")
VALUES ($1, $2)
RETURNING *;

-- name: UpdateProductSpuTag :one
UPDATE "catalog"."product_spu_tag"
SET "spu_id" = COALESCE(sqlc.narg('spu_id'), "spu_id"),
    "tag_id" = COALESCE(sqlc.narg('tag_id'), "tag_id")
WHERE "id" = $1
RETURNING *;

-- name: DeleteProductSpuTag :exec
DELETE FROM "catalog"."product_spu_tag"
WHERE ("id" = $1) OR ("spu_id" = $2 AND "tag_id" = $3);

-- ========================================

-- Queries for table: catalog.comment

-- ========================================

-- name: GetComment :one
SELECT *
FROM "catalog"."comment"
WHERE ("id" = $1) OR ("code" = $2) OR ("account_id" = $3 AND "ref_type" = $4 AND "ref_id" = $5);

-- name: CountComment :one
SELECT COUNT(*)
FROM "catalog"."comment"
WHERE (
    ("id" = sqlc.narg('id') OR sqlc.narg('id') IS NULL) AND
    ("code" = sqlc.narg('code') OR sqlc.narg('code') IS NULL) AND
    ("account_id" = sqlc.narg('account_id') OR sqlc.narg('account_id') IS NULL) AND
    ("ref_type" = sqlc.narg('ref_type') OR sqlc.narg('ref_type') IS NULL) AND
    ("ref_id" = sqlc.narg('ref_id') OR sqlc.narg('ref_id') IS NULL) AND
    ("upvote" = sqlc.narg('upvote') OR sqlc.narg('upvote') IS NULL) AND
    ("downvote" = sqlc.narg('downvote') OR sqlc.narg('downvote') IS NULL) AND
    ("score" = sqlc.narg('score') OR sqlc.narg('score') IS NULL) AND
    ("date_created" = sqlc.narg('date_created') OR sqlc.narg('date_created') IS NULL) AND
    ("date_updated" = sqlc.narg('date_updated') OR sqlc.narg('date_updated') IS NULL)
);

-- name: ListComment :many
SELECT *
FROM "catalog"."comment"
WHERE (
    ("id" = sqlc.narg('id') OR sqlc.narg('id') IS NULL) AND
    ("code" = sqlc.narg('code') OR sqlc.narg('code') IS NULL) AND
    ("account_id" = sqlc.narg('account_id') OR sqlc.narg('account_id') IS NULL) AND
    ("ref_type" = sqlc.narg('ref_type') OR sqlc.narg('ref_type') IS NULL) AND
    ("ref_id" = sqlc.narg('ref_id') OR sqlc.narg('ref_id') IS NULL) AND
    ("upvote" = sqlc.narg('upvote') OR sqlc.narg('upvote') IS NULL) AND
    ("downvote" = sqlc.narg('downvote') OR sqlc.narg('downvote') IS NULL) AND
    ("score" = sqlc.narg('score') OR sqlc.narg('score') IS NULL) AND
    ("date_created" = sqlc.narg('date_created') OR sqlc.narg('date_created') IS NULL) AND
    ("date_updated" = sqlc.narg('date_updated') OR sqlc.narg('date_updated') IS NULL)
)
ORDER BY "date_created" DESC
LIMIT sqlc.arg('limit')
OFFSET sqlc.arg('offset');

-- name: CreateComment :one
INSERT INTO "catalog"."comment" ("code", "account_id", "ref_type", "ref_id", "body", "upvote", "downvote", "score", "date_created", "date_updated")
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
RETURNING *;

-- name: CreateDefaultComment :one
INSERT INTO "catalog"."comment" ("code", "account_id", "ref_type", "ref_id", "body")
VALUES ($1, $2, $3, $4, $5)
RETURNING *;

-- name: UpdateComment :one
UPDATE "catalog"."comment"
SET "code" = COALESCE(sqlc.narg('code'), "code"),
    "account_id" = COALESCE(sqlc.narg('account_id'), "account_id"),
    "ref_type" = COALESCE(sqlc.narg('ref_type'), "ref_type"),
    "ref_id" = COALESCE(sqlc.narg('ref_id'), "ref_id"),
    "body" = COALESCE(sqlc.narg('body'), "body"),
    "upvote" = COALESCE(sqlc.narg('upvote'), "upvote"),
    "downvote" = COALESCE(sqlc.narg('downvote'), "downvote"),
    "score" = COALESCE(sqlc.narg('score'), "score"),
    "date_created" = COALESCE(sqlc.narg('date_created'), "date_created"),
    "date_updated" = COALESCE(sqlc.narg('date_updated'), "date_updated")
WHERE "id" = $1
RETURNING *;

-- name: DeleteComment :exec
DELETE FROM "catalog"."comment"
WHERE ("id" = $1) OR ("code" = $2) OR ("account_id" = $3 AND "ref_type" = $4 AND "ref_id" = $5);

-- ========================================

-- Queries for table: inventory.sku_serial

-- ========================================

-- name: GetSkuSerial :one
SELECT *
FROM "inventory"."sku_serial"
WHERE ("id" = $1) OR ("serial_number" = $2);

-- name: CountSkuSerial :one
SELECT COUNT(*)
FROM "inventory"."sku_serial"
WHERE (
    ("id" = sqlc.narg('id') OR sqlc.narg('id') IS NULL) AND
    ("serial_number" = sqlc.narg('serial_number') OR sqlc.narg('serial_number') IS NULL) AND
    ("sku_id" = sqlc.narg('sku_id') OR sqlc.narg('sku_id') IS NULL) AND
    ("status" = sqlc.narg('status') OR sqlc.narg('status') IS NULL) AND
    ("date_created" = sqlc.narg('date_created') OR sqlc.narg('date_created') IS NULL)
);

-- name: ListSkuSerial :many
SELECT *
FROM "inventory"."sku_serial"
WHERE (
    ("id" = sqlc.narg('id') OR sqlc.narg('id') IS NULL) AND
    ("serial_number" = sqlc.narg('serial_number') OR sqlc.narg('serial_number') IS NULL) AND
    ("sku_id" = sqlc.narg('sku_id') OR sqlc.narg('sku_id') IS NULL) AND
    ("status" = sqlc.narg('status') OR sqlc.narg('status') IS NULL) AND
    ("date_created" = sqlc.narg('date_created') OR sqlc.narg('date_created') IS NULL)
)
ORDER BY "date_created" DESC
LIMIT sqlc.arg('limit')
OFFSET sqlc.arg('offset');

-- name: CreateSkuSerial :one
INSERT INTO "inventory"."sku_serial" ("serial_number", "sku_id", "status", "date_created")
VALUES ($1, $2, $3, $4)
RETURNING *;

-- name: CreateDefaultSkuSerial :one
INSERT INTO "inventory"."sku_serial" ("serial_number", "sku_id", "status")
VALUES ($1, $2, $3)
RETURNING *;

-- name: UpdateSkuSerial :one
UPDATE "inventory"."sku_serial"
SET "serial_number" = COALESCE(sqlc.narg('serial_number'), "serial_number"),
    "sku_id" = COALESCE(sqlc.narg('sku_id'), "sku_id"),
    "status" = COALESCE(sqlc.narg('status'), "status"),
    "date_created" = COALESCE(sqlc.narg('date_created'), "date_created")
WHERE "id" = $1
RETURNING *;

-- name: DeleteSkuSerial :exec
DELETE FROM "inventory"."sku_serial"
WHERE ("id" = $1) OR ("serial_number" = $2);

-- ========================================

-- Queries for table: inventory.stock

-- ========================================

-- name: GetStock :one
SELECT *
FROM "inventory"."stock"
WHERE ("id" = $1) OR ("ref_id" = $2 AND "ref_type" = $3);

-- name: CountStock :one
SELECT COUNT(*)
FROM "inventory"."stock"
WHERE (
    ("id" = sqlc.narg('id') OR sqlc.narg('id') IS NULL) AND
    ("ref_type" = sqlc.narg('ref_type') OR sqlc.narg('ref_type') IS NULL) AND
    ("ref_id" = sqlc.narg('ref_id') OR sqlc.narg('ref_id') IS NULL) AND
    ("current_stock" = sqlc.narg('current_stock') OR sqlc.narg('current_stock') IS NULL) AND
    ("sold" = sqlc.narg('sold') OR sqlc.narg('sold') IS NULL) AND
    ("date_created" = sqlc.narg('date_created') OR sqlc.narg('date_created') IS NULL)
);

-- name: ListStock :many
SELECT *
FROM "inventory"."stock"
WHERE (
    ("id" = sqlc.narg('id') OR sqlc.narg('id') IS NULL) AND
    ("ref_type" = sqlc.narg('ref_type') OR sqlc.narg('ref_type') IS NULL) AND
    ("ref_id" = sqlc.narg('ref_id') OR sqlc.narg('ref_id') IS NULL) AND
    ("current_stock" = sqlc.narg('current_stock') OR sqlc.narg('current_stock') IS NULL) AND
    ("sold" = sqlc.narg('sold') OR sqlc.narg('sold') IS NULL) AND
    ("date_created" = sqlc.narg('date_created') OR sqlc.narg('date_created') IS NULL)
)
ORDER BY "date_created" DESC
LIMIT sqlc.arg('limit')
OFFSET sqlc.arg('offset');

-- name: CreateStock :one
INSERT INTO "inventory"."stock" ("ref_type", "ref_id", "current_stock", "sold", "date_created")
VALUES ($1, $2, $3, $4, $5)
RETURNING *;

-- name: CreateDefaultStock :one
INSERT INTO "inventory"."stock" ("ref_type", "ref_id")
VALUES ($1, $2)
RETURNING *;

-- name: UpdateStock :one
UPDATE "inventory"."stock"
SET "ref_type" = COALESCE(sqlc.narg('ref_type'), "ref_type"),
    "ref_id" = COALESCE(sqlc.narg('ref_id'), "ref_id"),
    "current_stock" = COALESCE(sqlc.narg('current_stock'), "current_stock"),
    "sold" = COALESCE(sqlc.narg('sold'), "sold"),
    "date_created" = COALESCE(sqlc.narg('date_created'), "date_created")
WHERE "id" = $1
RETURNING *;

-- name: DeleteStock :exec
DELETE FROM "inventory"."stock"
WHERE ("id" = $1) OR ("ref_id" = $2 AND "ref_type" = $3);

-- ========================================

-- Queries for table: inventory.stock_history

-- ========================================

-- name: GetStockHistory :one
SELECT *
FROM "inventory"."stock_history"
WHERE ("id" = $1);

-- name: CountStockHistory :one
SELECT COUNT(*)
FROM "inventory"."stock_history"
WHERE (
    ("id" = sqlc.narg('id') OR sqlc.narg('id') IS NULL) AND
    ("stock_id" = sqlc.narg('stock_id') OR sqlc.narg('stock_id') IS NULL) AND
    ("change" = sqlc.narg('change') OR sqlc.narg('change') IS NULL) AND
    ("date_created" = sqlc.narg('date_created') OR sqlc.narg('date_created') IS NULL)
);

-- name: ListStockHistory :many
SELECT *
FROM "inventory"."stock_history"
WHERE (
    ("id" = sqlc.narg('id') OR sqlc.narg('id') IS NULL) AND
    ("stock_id" = sqlc.narg('stock_id') OR sqlc.narg('stock_id') IS NULL) AND
    ("change" = sqlc.narg('change') OR sqlc.narg('change') IS NULL) AND
    ("date_created" = sqlc.narg('date_created') OR sqlc.narg('date_created') IS NULL)
)
ORDER BY "date_created" DESC
LIMIT sqlc.arg('limit')
OFFSET sqlc.arg('offset');

-- name: CreateStockHistory :one
INSERT INTO "inventory"."stock_history" ("stock_id", "change", "date_created")
VALUES ($1, $2, $3)
RETURNING *;

-- name: CreateDefaultStockHistory :one
INSERT INTO "inventory"."stock_history" ("stock_id", "change")
VALUES ($1, $2)
RETURNING *;

-- name: UpdateStockHistory :one
UPDATE "inventory"."stock_history"
SET "stock_id" = COALESCE(sqlc.narg('stock_id'), "stock_id"),
    "change" = COALESCE(sqlc.narg('change'), "change"),
    "date_created" = COALESCE(sqlc.narg('date_created'), "date_created")
WHERE "id" = $1
RETURNING *;

-- name: DeleteStockHistory :exec
DELETE FROM "inventory"."stock_history"
WHERE ("id" = $1);

-- ========================================

-- Queries for table: payment.order

-- ========================================

-- name: GetOrder :one
SELECT *
FROM "payment"."order"
WHERE ("id" = $1) OR ("code" = $2);

-- name: CountOrder :one
SELECT COUNT(*)
FROM "payment"."order"
WHERE (
    ("id" = sqlc.narg('id') OR sqlc.narg('id') IS NULL) AND
    ("code" = sqlc.narg('code') OR sqlc.narg('code') IS NULL) AND
    ("customer_id" = sqlc.narg('customer_id') OR sqlc.narg('customer_id') IS NULL) AND
    ("payment_method" = sqlc.narg('payment_method') OR sqlc.narg('payment_method') IS NULL) AND
    ("status" = sqlc.narg('status') OR sqlc.narg('status') IS NULL) AND
    ("date_created" = sqlc.narg('date_created') OR sqlc.narg('date_created') IS NULL) AND
    ("date_updated" = sqlc.narg('date_updated') OR sqlc.narg('date_updated') IS NULL)
);

-- name: ListOrder :many
SELECT *
FROM "payment"."order"
WHERE (
    ("id" = sqlc.narg('id') OR sqlc.narg('id') IS NULL) AND
    ("code" = sqlc.narg('code') OR sqlc.narg('code') IS NULL) AND
    ("customer_id" = sqlc.narg('customer_id') OR sqlc.narg('customer_id') IS NULL) AND
    ("payment_method" = sqlc.narg('payment_method') OR sqlc.narg('payment_method') IS NULL) AND
    ("status" = sqlc.narg('status') OR sqlc.narg('status') IS NULL) AND
    ("date_created" = sqlc.narg('date_created') OR sqlc.narg('date_created') IS NULL) AND
    ("date_updated" = sqlc.narg('date_updated') OR sqlc.narg('date_updated') IS NULL)
)
ORDER BY "date_created" DESC
LIMIT sqlc.arg('limit')
OFFSET sqlc.arg('offset');

-- name: CreateOrder :one
INSERT INTO "payment"."order" ("code", "customer_id", "payment_method", "status", "address", "date_created", "date_updated")
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING *;

-- name: CreateDefaultOrder :one
INSERT INTO "payment"."order" ("code", "customer_id", "payment_method", "status", "address", "date_updated")
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING *;

-- name: UpdateOrder :one
UPDATE "payment"."order"
SET "code" = COALESCE(sqlc.narg('code'), "code"),
    "customer_id" = COALESCE(sqlc.narg('customer_id'), "customer_id"),
    "payment_method" = COALESCE(sqlc.narg('payment_method'), "payment_method"),
    "status" = COALESCE(sqlc.narg('status'), "status"),
    "address" = COALESCE(sqlc.narg('address'), "address"),
    "date_created" = COALESCE(sqlc.narg('date_created'), "date_created"),
    "date_updated" = COALESCE(sqlc.narg('date_updated'), "date_updated")
WHERE "id" = $1
RETURNING *;

-- name: DeleteOrder :exec
DELETE FROM "payment"."order"
WHERE ("id" = $1) OR ("code" = $2);

-- ========================================

-- Queries for table: payment.order_item

-- ========================================

-- name: GetOrderItem :one
SELECT *
FROM "payment"."order_item"
WHERE ("id" = $1) OR ("code" = $2);

-- name: CountOrderItem :one
SELECT COUNT(*)
FROM "payment"."order_item"
WHERE (
    ("id" = sqlc.narg('id') OR sqlc.narg('id') IS NULL) AND
    ("code" = sqlc.narg('code') OR sqlc.narg('code') IS NULL) AND
    ("order_id" = sqlc.narg('order_id') OR sqlc.narg('order_id') IS NULL) AND
    ("sku_id" = sqlc.narg('sku_id') OR sqlc.narg('sku_id') IS NULL) AND
    ("quantity" = sqlc.narg('quantity') OR sqlc.narg('quantity') IS NULL)
);

-- name: ListOrderItem :many
SELECT *
FROM "payment"."order_item"
WHERE (
    ("id" = sqlc.narg('id') OR sqlc.narg('id') IS NULL) AND
    ("code" = sqlc.narg('code') OR sqlc.narg('code') IS NULL) AND
    ("order_id" = sqlc.narg('order_id') OR sqlc.narg('order_id') IS NULL) AND
    ("sku_id" = sqlc.narg('sku_id') OR sqlc.narg('sku_id') IS NULL) AND
    ("quantity" = sqlc.narg('quantity') OR sqlc.narg('quantity') IS NULL)
)
ORDER BY "id"
LIMIT sqlc.arg('limit')
OFFSET sqlc.arg('offset');

-- name: CreateOrderItem :one
INSERT INTO "payment"."order_item" ("code", "order_id", "sku_id", "quantity")
VALUES ($1, $2, $3, $4)
RETURNING *;

-- name: CreateDefaultOrderItem :one
INSERT INTO "payment"."order_item" ("code", "order_id", "sku_id", "quantity")
VALUES ($1, $2, $3, $4)
RETURNING *;

-- name: UpdateOrderItem :one
UPDATE "payment"."order_item"
SET "code" = COALESCE(sqlc.narg('code'), "code"),
    "order_id" = COALESCE(sqlc.narg('order_id'), "order_id"),
    "sku_id" = COALESCE(sqlc.narg('sku_id'), "sku_id"),
    "quantity" = COALESCE(sqlc.narg('quantity'), "quantity")
WHERE "id" = $1
RETURNING *;

-- name: DeleteOrderItem :exec
DELETE FROM "payment"."order_item"
WHERE ("id" = $1) OR ("code" = $2);

-- ========================================

-- Queries for table: payment.order_item_serial

-- ========================================

-- name: GetOrderItemSerial :one
SELECT *
FROM "payment"."order_item_serial"
WHERE ("id" = $1) OR ("order_item_id" = $2 AND "product_serial_id" = $3);

-- name: CountOrderItemSerial :one
SELECT COUNT(*)
FROM "payment"."order_item_serial"
WHERE (
    ("id" = sqlc.narg('id') OR sqlc.narg('id') IS NULL) AND
    ("order_item_id" = sqlc.narg('order_item_id') OR sqlc.narg('order_item_id') IS NULL) AND
    ("product_serial_id" = sqlc.narg('product_serial_id') OR sqlc.narg('product_serial_id') IS NULL)
);

-- name: ListOrderItemSerial :many
SELECT *
FROM "payment"."order_item_serial"
WHERE (
    ("id" = sqlc.narg('id') OR sqlc.narg('id') IS NULL) AND
    ("order_item_id" = sqlc.narg('order_item_id') OR sqlc.narg('order_item_id') IS NULL) AND
    ("product_serial_id" = sqlc.narg('product_serial_id') OR sqlc.narg('product_serial_id') IS NULL)
)
ORDER BY "id"
LIMIT sqlc.arg('limit')
OFFSET sqlc.arg('offset');

-- name: CreateOrderItemSerial :one
INSERT INTO "payment"."order_item_serial" ("order_item_id", "product_serial_id")
VALUES ($1, $2)
RETURNING *;

-- name: CreateDefaultOrderItemSerial :one
INSERT INTO "payment"."order_item_serial" ("order_item_id", "product_serial_id")
VALUES ($1, $2)
RETURNING *;

-- name: UpdateOrderItemSerial :one
UPDATE "payment"."order_item_serial"
SET "order_item_id" = COALESCE(sqlc.narg('order_item_id'), "order_item_id"),
    "product_serial_id" = COALESCE(sqlc.narg('product_serial_id'), "product_serial_id")
WHERE "id" = $1
RETURNING *;

-- name: DeleteOrderItemSerial :exec
DELETE FROM "payment"."order_item_serial"
WHERE ("id" = $1) OR ("order_item_id" = $2 AND "product_serial_id" = $3);

-- ========================================

-- Queries for table: payment.vnpay

-- ========================================

-- name: GetVnpay :one
SELECT *
FROM "payment"."vnpay"
WHERE ("id" = $1) OR ("order_id" = $2);

-- name: CountVnpay :one
SELECT COUNT(*)
FROM "payment"."vnpay"
WHERE (
    ("id" = sqlc.narg('id') OR sqlc.narg('id') IS NULL) AND
    ("order_id" = sqlc.narg('order_id') OR sqlc.narg('order_id') IS NULL)
);

-- name: ListVnpay :many
SELECT *
FROM "payment"."vnpay"
WHERE (
    ("id" = sqlc.narg('id') OR sqlc.narg('id') IS NULL) AND
    ("order_id" = sqlc.narg('order_id') OR sqlc.narg('order_id') IS NULL)
)
ORDER BY "id"
LIMIT sqlc.arg('limit')
OFFSET sqlc.arg('offset');

-- name: CreateVnpay :one
INSERT INTO "payment"."vnpay" ("order_id", "vnp_Amount", "vnp_BankCode", "vnp_CardType", "vnp_OrderInfo", "vnp_PayDate", "vnp_ResponseCode", "vnp_SecureHash", "vnp_TmnCode", "vnp_TransactionNo", "vnp_TransactionStatus", "vnp_TxnRef")
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12)
RETURNING *;

-- name: CreateDefaultVnpay :one
INSERT INTO "payment"."vnpay" ("order_id", "vnp_Amount", "vnp_BankCode", "vnp_CardType", "vnp_OrderInfo", "vnp_PayDate", "vnp_ResponseCode", "vnp_SecureHash", "vnp_TmnCode", "vnp_TransactionNo", "vnp_TransactionStatus", "vnp_TxnRef")
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12)
RETURNING *;

-- name: UpdateVnpay :one
UPDATE "payment"."vnpay"
SET "order_id" = COALESCE(sqlc.narg('order_id'), "order_id"),
    "vnp_Amount" = COALESCE(sqlc.narg('vnp_Amount'), "vnp_Amount"),
    "vnp_BankCode" = COALESCE(sqlc.narg('vnp_BankCode'), "vnp_BankCode"),
    "vnp_CardType" = COALESCE(sqlc.narg('vnp_CardType'), "vnp_CardType"),
    "vnp_OrderInfo" = COALESCE(sqlc.narg('vnp_OrderInfo'), "vnp_OrderInfo"),
    "vnp_PayDate" = COALESCE(sqlc.narg('vnp_PayDate'), "vnp_PayDate"),
    "vnp_ResponseCode" = COALESCE(sqlc.narg('vnp_ResponseCode'), "vnp_ResponseCode"),
    "vnp_SecureHash" = COALESCE(sqlc.narg('vnp_SecureHash'), "vnp_SecureHash"),
    "vnp_TmnCode" = COALESCE(sqlc.narg('vnp_TmnCode'), "vnp_TmnCode"),
    "vnp_TransactionNo" = COALESCE(sqlc.narg('vnp_TransactionNo'), "vnp_TransactionNo"),
    "vnp_TransactionStatus" = COALESCE(sqlc.narg('vnp_TransactionStatus'), "vnp_TransactionStatus"),
    "vnp_TxnRef" = COALESCE(sqlc.narg('vnp_TxnRef'), "vnp_TxnRef")
WHERE "id" = $1
RETURNING *;

-- name: DeleteVnpay :exec
DELETE FROM "payment"."vnpay"
WHERE ("id" = $1) OR ("order_id" = $2);

-- ========================================

-- Queries for table: payment.refund

-- ========================================

-- name: GetRefund :one
SELECT *
FROM "payment"."refund"
WHERE ("id" = $1) OR ("code" = $2);

-- name: CountRefund :one
SELECT COUNT(*)
FROM "payment"."refund"
WHERE (
    ("id" = sqlc.narg('id') OR sqlc.narg('id') IS NULL) AND
    ("code" = sqlc.narg('code') OR sqlc.narg('code') IS NULL) AND
    ("order_item_id" = sqlc.narg('order_item_id') OR sqlc.narg('order_item_id') IS NULL) AND
    ("reviewed_by_id" = sqlc.narg('reviewed_by_id') OR sqlc.narg('reviewed_by_id') IS NULL) AND
    ("method" = sqlc.narg('method') OR sqlc.narg('method') IS NULL) AND
    ("status" = sqlc.narg('status') OR sqlc.narg('status') IS NULL) AND
    ("date_created" = sqlc.narg('date_created') OR sqlc.narg('date_created') IS NULL)
);

-- name: ListRefund :many
SELECT *
FROM "payment"."refund"
WHERE (
    ("id" = sqlc.narg('id') OR sqlc.narg('id') IS NULL) AND
    ("code" = sqlc.narg('code') OR sqlc.narg('code') IS NULL) AND
    ("order_item_id" = sqlc.narg('order_item_id') OR sqlc.narg('order_item_id') IS NULL) AND
    ("reviewed_by_id" = sqlc.narg('reviewed_by_id') OR sqlc.narg('reviewed_by_id') IS NULL) AND
    ("method" = sqlc.narg('method') OR sqlc.narg('method') IS NULL) AND
    ("status" = sqlc.narg('status') OR sqlc.narg('status') IS NULL) AND
    ("date_created" = sqlc.narg('date_created') OR sqlc.narg('date_created') IS NULL)
)
ORDER BY "date_created" DESC
LIMIT sqlc.arg('limit')
OFFSET sqlc.arg('offset');

-- name: CreateRefund :one
INSERT INTO "payment"."refund" ("code", "order_item_id", "reviewed_by_id", "method", "status", "reason", "address", "date_created")
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING *;

-- name: CreateDefaultRefund :one
INSERT INTO "payment"."refund" ("code", "order_item_id", "reviewed_by_id", "method", "status", "reason", "address")
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING *;

-- name: UpdateRefund :one
UPDATE "payment"."refund"
SET "code" = COALESCE(sqlc.narg('code'), "code"),
    "order_item_id" = COALESCE(sqlc.narg('order_item_id'), "order_item_id"),
    "reviewed_by_id" = CASE WHEN sqlc.arg('null_reviewed_by_id')::bool = TRUE THEN NULL ELSE COALESCE(sqlc.narg('reviewed_by_id'), "reviewed_by_id") END,
    "method" = COALESCE(sqlc.narg('method'), "method"),
    "status" = COALESCE(sqlc.narg('status'), "status"),
    "reason" = COALESCE(sqlc.narg('reason'), "reason"),
    "address" = CASE WHEN sqlc.arg('null_address')::bool = TRUE THEN NULL ELSE COALESCE(sqlc.narg('address'), "address") END,
    "date_created" = COALESCE(sqlc.narg('date_created'), "date_created")
WHERE "id" = $1
RETURNING *;

-- name: DeleteRefund :exec
DELETE FROM "payment"."refund"
WHERE ("id" = $1) OR ("code" = $2);

-- ========================================

-- Queries for table: payment.refund_dispute

-- ========================================

-- name: GetRefundDispute :one
SELECT *
FROM "payment"."refund_dispute"
WHERE ("id" = $1) OR ("code" = $2);

-- name: CountRefundDispute :one
SELECT COUNT(*)
FROM "payment"."refund_dispute"
WHERE (
    ("id" = sqlc.narg('id') OR sqlc.narg('id') IS NULL) AND
    ("code" = sqlc.narg('code') OR sqlc.narg('code') IS NULL) AND
    ("refund_id" = sqlc.narg('refund_id') OR sqlc.narg('refund_id') IS NULL) AND
    ("vendor_id" = sqlc.narg('vendor_id') OR sqlc.narg('vendor_id') IS NULL) AND
    ("status" = sqlc.narg('status') OR sqlc.narg('status') IS NULL) AND
    ("date_created" = sqlc.narg('date_created') OR sqlc.narg('date_created') IS NULL) AND
    ("date_updated" = sqlc.narg('date_updated') OR sqlc.narg('date_updated') IS NULL)
);

-- name: ListRefundDispute :many
SELECT *
FROM "payment"."refund_dispute"
WHERE (
    ("id" = sqlc.narg('id') OR sqlc.narg('id') IS NULL) AND
    ("code" = sqlc.narg('code') OR sqlc.narg('code') IS NULL) AND
    ("refund_id" = sqlc.narg('refund_id') OR sqlc.narg('refund_id') IS NULL) AND
    ("vendor_id" = sqlc.narg('vendor_id') OR sqlc.narg('vendor_id') IS NULL) AND
    ("status" = sqlc.narg('status') OR sqlc.narg('status') IS NULL) AND
    ("date_created" = sqlc.narg('date_created') OR sqlc.narg('date_created') IS NULL) AND
    ("date_updated" = sqlc.narg('date_updated') OR sqlc.narg('date_updated') IS NULL)
)
ORDER BY "date_created" DESC
LIMIT sqlc.arg('limit')
OFFSET sqlc.arg('offset');

-- name: CreateRefundDispute :one
INSERT INTO "payment"."refund_dispute" ("code", "refund_id", "vendor_id", "reason", "status", "date_created", "date_updated")
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING *;

-- name: CreateDefaultRefundDispute :one
INSERT INTO "payment"."refund_dispute" ("code", "refund_id", "vendor_id", "reason", "date_updated")
VALUES ($1, $2, $3, $4, $5)
RETURNING *;

-- name: UpdateRefundDispute :one
UPDATE "payment"."refund_dispute"
SET "code" = COALESCE(sqlc.narg('code'), "code"),
    "refund_id" = COALESCE(sqlc.narg('refund_id'), "refund_id"),
    "vendor_id" = COALESCE(sqlc.narg('vendor_id'), "vendor_id"),
    "reason" = COALESCE(sqlc.narg('reason'), "reason"),
    "status" = COALESCE(sqlc.narg('status'), "status"),
    "date_created" = COALESCE(sqlc.narg('date_created'), "date_created"),
    "date_updated" = COALESCE(sqlc.narg('date_updated'), "date_updated")
WHERE "id" = $1
RETURNING *;

-- name: DeleteRefundDispute :exec
DELETE FROM "payment"."refund_dispute"
WHERE ("id" = $1) OR ("code" = $2);

-- ========================================

-- Queries for table: payment.invoice

-- ========================================

-- name: GetInvoice :one
SELECT *
FROM "payment"."invoice"
WHERE ("id" = $1) OR ("code" = $2) OR ("hash" = $3);

-- name: CountInvoice :one
SELECT COUNT(*)
FROM "payment"."invoice"
WHERE (
    ("id" = sqlc.narg('id') OR sqlc.narg('id') IS NULL) AND
    ("code" = sqlc.narg('code') OR sqlc.narg('code') IS NULL) AND
    ("type" = sqlc.narg('type') OR sqlc.narg('type') IS NULL) AND
    ("ref_type" = sqlc.narg('ref_type') OR sqlc.narg('ref_type') IS NULL) AND
    ("ref_id" = sqlc.narg('ref_id') OR sqlc.narg('ref_id') IS NULL) AND
    ("seller_account_id" = sqlc.narg('seller_account_id') OR sqlc.narg('seller_account_id') IS NULL) AND
    ("buyer_account_id" = sqlc.narg('buyer_account_id') OR sqlc.narg('buyer_account_id') IS NULL) AND
    ("status" = sqlc.narg('status') OR sqlc.narg('status') IS NULL) AND
    ("payment_method" = sqlc.narg('payment_method') OR sqlc.narg('payment_method') IS NULL) AND
    ("subtotal" = sqlc.narg('subtotal') OR sqlc.narg('subtotal') IS NULL) AND
    ("total" = sqlc.narg('total') OR sqlc.narg('total') IS NULL) AND
    ("date_created" = sqlc.narg('date_created') OR sqlc.narg('date_created') IS NULL) AND
    ("hash" = sqlc.narg('hash') OR sqlc.narg('hash') IS NULL) AND
    ("prev_hash" = sqlc.narg('prev_hash') OR sqlc.narg('prev_hash') IS NULL)
);

-- name: ListInvoice :many
SELECT *
FROM "payment"."invoice"
WHERE (
    ("id" = sqlc.narg('id') OR sqlc.narg('id') IS NULL) AND
    ("code" = sqlc.narg('code') OR sqlc.narg('code') IS NULL) AND
    ("type" = sqlc.narg('type') OR sqlc.narg('type') IS NULL) AND
    ("ref_type" = sqlc.narg('ref_type') OR sqlc.narg('ref_type') IS NULL) AND
    ("ref_id" = sqlc.narg('ref_id') OR sqlc.narg('ref_id') IS NULL) AND
    ("seller_account_id" = sqlc.narg('seller_account_id') OR sqlc.narg('seller_account_id') IS NULL) AND
    ("buyer_account_id" = sqlc.narg('buyer_account_id') OR sqlc.narg('buyer_account_id') IS NULL) AND
    ("status" = sqlc.narg('status') OR sqlc.narg('status') IS NULL) AND
    ("payment_method" = sqlc.narg('payment_method') OR sqlc.narg('payment_method') IS NULL) AND
    ("subtotal" = sqlc.narg('subtotal') OR sqlc.narg('subtotal') IS NULL) AND
    ("total" = sqlc.narg('total') OR sqlc.narg('total') IS NULL) AND
    ("date_created" = sqlc.narg('date_created') OR sqlc.narg('date_created') IS NULL) AND
    ("hash" = sqlc.narg('hash') OR sqlc.narg('hash') IS NULL) AND
    ("prev_hash" = sqlc.narg('prev_hash') OR sqlc.narg('prev_hash') IS NULL)
)
ORDER BY "date_created" DESC
LIMIT sqlc.arg('limit')
OFFSET sqlc.arg('offset');

-- name: CreateInvoice :one
INSERT INTO "payment"."invoice" ("code", "type", "ref_type", "ref_id", "seller_account_id", "buyer_account_id", "status", "payment_method", "address", "phone", "subtotal", "total", "file_rs_id", "date_created", "hash", "prev_hash")
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16)
RETURNING *;

-- name: CreateDefaultInvoice :one
INSERT INTO "payment"."invoice" ("code", "type", "ref_type", "ref_id", "seller_account_id", "buyer_account_id", "status", "payment_method", "address", "phone", "subtotal", "total", "file_rs_id", "hash", "prev_hash")
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15)
RETURNING *;

-- name: UpdateInvoice :one
UPDATE "payment"."invoice"
SET "code" = COALESCE(sqlc.narg('code'), "code"),
    "type" = COALESCE(sqlc.narg('type'), "type"),
    "ref_type" = COALESCE(sqlc.narg('ref_type'), "ref_type"),
    "ref_id" = COALESCE(sqlc.narg('ref_id'), "ref_id"),
    "seller_account_id" = CASE WHEN sqlc.arg('null_seller_account_id')::bool = TRUE THEN NULL ELSE COALESCE(sqlc.narg('seller_account_id'), "seller_account_id") END,
    "buyer_account_id" = COALESCE(sqlc.narg('buyer_account_id'), "buyer_account_id"),
    "status" = COALESCE(sqlc.narg('status'), "status"),
    "payment_method" = COALESCE(sqlc.narg('payment_method'), "payment_method"),
    "address" = COALESCE(sqlc.narg('address'), "address"),
    "phone" = COALESCE(sqlc.narg('phone'), "phone"),
    "subtotal" = COALESCE(sqlc.narg('subtotal'), "subtotal"),
    "total" = COALESCE(sqlc.narg('total'), "total"),
    "file_rs_id" = COALESCE(sqlc.narg('file_rs_id'), "file_rs_id"),
    "date_created" = COALESCE(sqlc.narg('date_created'), "date_created"),
    "hash" = COALESCE(sqlc.narg('hash'), "hash"),
    "prev_hash" = CASE WHEN sqlc.arg('null_prev_hash')::bool = TRUE THEN NULL ELSE COALESCE(sqlc.narg('prev_hash'), "prev_hash") END
WHERE "id" = $1
RETURNING *;

-- name: DeleteInvoice :exec
DELETE FROM "payment"."invoice"
WHERE ("id" = $1) OR ("code" = $2) OR ("hash" = $3);

-- ========================================

-- Queries for table: payment.invoice_item

-- ========================================

-- name: GetInvoiceItem :one
SELECT *
FROM "payment"."invoice_item"
WHERE ("id" = $1);

-- name: CountInvoiceItem :one
SELECT COUNT(*)
FROM "payment"."invoice_item"
WHERE (
    ("id" = sqlc.narg('id') OR sqlc.narg('id') IS NULL) AND
    ("invoice_id" = sqlc.narg('invoice_id') OR sqlc.narg('invoice_id') IS NULL) AND
    ("snapshot" = sqlc.narg('snapshot') OR sqlc.narg('snapshot') IS NULL) AND
    ("quantity" = sqlc.narg('quantity') OR sqlc.narg('quantity') IS NULL) AND
    ("unit_price" = sqlc.narg('unit_price') OR sqlc.narg('unit_price') IS NULL) AND
    ("subtotal" = sqlc.narg('subtotal') OR sqlc.narg('subtotal') IS NULL) AND
    ("total" = sqlc.narg('total') OR sqlc.narg('total') IS NULL)
);

-- name: ListInvoiceItem :many
SELECT *
FROM "payment"."invoice_item"
WHERE (
    ("id" = sqlc.narg('id') OR sqlc.narg('id') IS NULL) AND
    ("invoice_id" = sqlc.narg('invoice_id') OR sqlc.narg('invoice_id') IS NULL) AND
    ("snapshot" = sqlc.narg('snapshot') OR sqlc.narg('snapshot') IS NULL) AND
    ("quantity" = sqlc.narg('quantity') OR sqlc.narg('quantity') IS NULL) AND
    ("unit_price" = sqlc.narg('unit_price') OR sqlc.narg('unit_price') IS NULL) AND
    ("subtotal" = sqlc.narg('subtotal') OR sqlc.narg('subtotal') IS NULL) AND
    ("total" = sqlc.narg('total') OR sqlc.narg('total') IS NULL)
)
ORDER BY "id"
LIMIT sqlc.arg('limit')
OFFSET sqlc.arg('offset');

-- name: CreateInvoiceItem :one
INSERT INTO "payment"."invoice_item" ("invoice_id", "snapshot", "quantity", "unit_price", "subtotal", "total")
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING *;

-- name: CreateDefaultInvoiceItem :one
INSERT INTO "payment"."invoice_item" ("invoice_id", "snapshot", "quantity", "unit_price", "subtotal", "total")
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING *;

-- name: UpdateInvoiceItem :one
UPDATE "payment"."invoice_item"
SET "invoice_id" = COALESCE(sqlc.narg('invoice_id'), "invoice_id"),
    "snapshot" = COALESCE(sqlc.narg('snapshot'), "snapshot"),
    "quantity" = COALESCE(sqlc.narg('quantity'), "quantity"),
    "unit_price" = COALESCE(sqlc.narg('unit_price'), "unit_price"),
    "subtotal" = COALESCE(sqlc.narg('subtotal'), "subtotal"),
    "total" = COALESCE(sqlc.narg('total'), "total")
WHERE "id" = $1
RETURNING *;

-- name: DeleteInvoiceItem :exec
DELETE FROM "payment"."invoice_item"
WHERE ("id" = $1);

-- ========================================

-- Queries for table: promotion.promotion

-- ========================================

-- name: GetPromotion :one
SELECT *
FROM "promotion"."promotion"
WHERE ("id" = $1) OR ("code" = $2);

-- name: CountPromotion :one
SELECT COUNT(*)
FROM "promotion"."promotion"
WHERE (
    ("id" = sqlc.narg('id') OR sqlc.narg('id') IS NULL) AND
    ("code" = sqlc.narg('code') OR sqlc.narg('code') IS NULL) AND
    ("type" = sqlc.narg('type') OR sqlc.narg('type') IS NULL) AND
    ("is_active" = sqlc.narg('is_active') OR sqlc.narg('is_active') IS NULL) AND
    ("date_started" = sqlc.narg('date_started') OR sqlc.narg('date_started') IS NULL) AND
    ("date_ended" = sqlc.narg('date_ended') OR sqlc.narg('date_ended') IS NULL) AND
    ("date_created" = sqlc.narg('date_created') OR sqlc.narg('date_created') IS NULL)
);

-- name: ListPromotion :many
SELECT *
FROM "promotion"."promotion"
WHERE (
    ("id" = sqlc.narg('id') OR sqlc.narg('id') IS NULL) AND
    ("code" = sqlc.narg('code') OR sqlc.narg('code') IS NULL) AND
    ("type" = sqlc.narg('type') OR sqlc.narg('type') IS NULL) AND
    ("is_active" = sqlc.narg('is_active') OR sqlc.narg('is_active') IS NULL) AND
    ("date_started" = sqlc.narg('date_started') OR sqlc.narg('date_started') IS NULL) AND
    ("date_ended" = sqlc.narg('date_ended') OR sqlc.narg('date_ended') IS NULL) AND
    ("date_created" = sqlc.narg('date_created') OR sqlc.narg('date_created') IS NULL)
)
ORDER BY "date_created" DESC
LIMIT sqlc.arg('limit')
OFFSET sqlc.arg('offset');

-- name: CreatePromotion :one
INSERT INTO "promotion"."promotion" ("code", "type", "is_active", "date_started", "date_ended", "date_created")
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING *;

-- name: CreateDefaultPromotion :one
INSERT INTO "promotion"."promotion" ("code", "type", "date_ended")
VALUES ($1, $2, $3)
RETURNING *;

-- name: UpdatePromotion :one
UPDATE "promotion"."promotion"
SET "code" = COALESCE(sqlc.narg('code'), "code"),
    "type" = COALESCE(sqlc.narg('type'), "type"),
    "is_active" = COALESCE(sqlc.narg('is_active'), "is_active"),
    "date_started" = COALESCE(sqlc.narg('date_started'), "date_started"),
    "date_ended" = CASE WHEN sqlc.arg('null_date_ended')::bool = TRUE THEN NULL ELSE COALESCE(sqlc.narg('date_ended'), "date_ended") END,
    "date_created" = COALESCE(sqlc.narg('date_created'), "date_created")
WHERE "id" = $1
RETURNING *;

-- name: DeletePromotion :exec
DELETE FROM "promotion"."promotion"
WHERE ("id" = $1) OR ("code" = $2);

-- ========================================

-- Queries for table: promotion.promotion_voucher

-- ========================================

-- name: GetPromotionVoucher :one
SELECT *
FROM "promotion"."promotion_voucher"
WHERE ("id" = $1) OR ("promotion_id" = $2);

-- name: CountPromotionVoucher :one
SELECT COUNT(*)
FROM "promotion"."promotion_voucher"
WHERE (
    ("id" = sqlc.narg('id') OR sqlc.narg('id') IS NULL) AND
    ("promotion_id" = sqlc.narg('promotion_id') OR sqlc.narg('promotion_id') IS NULL) AND
    ("min_spend" = sqlc.narg('min_spend') OR sqlc.narg('min_spend') IS NULL) AND
    ("max_discount" = sqlc.narg('max_discount') OR sqlc.narg('max_discount') IS NULL) AND
    ("discount_percent" = sqlc.narg('discount_percent') OR sqlc.narg('discount_percent') IS NULL) AND
    ("discount_price" = sqlc.narg('discount_price') OR sqlc.narg('discount_price') IS NULL)
);

-- name: ListPromotionVoucher :many
SELECT *
FROM "promotion"."promotion_voucher"
WHERE (
    ("id" = sqlc.narg('id') OR sqlc.narg('id') IS NULL) AND
    ("promotion_id" = sqlc.narg('promotion_id') OR sqlc.narg('promotion_id') IS NULL) AND
    ("min_spend" = sqlc.narg('min_spend') OR sqlc.narg('min_spend') IS NULL) AND
    ("max_discount" = sqlc.narg('max_discount') OR sqlc.narg('max_discount') IS NULL) AND
    ("discount_percent" = sqlc.narg('discount_percent') OR sqlc.narg('discount_percent') IS NULL) AND
    ("discount_price" = sqlc.narg('discount_price') OR sqlc.narg('discount_price') IS NULL)
)
ORDER BY "id"
LIMIT sqlc.arg('limit')
OFFSET sqlc.arg('offset');

-- name: CreatePromotionVoucher :one
INSERT INTO "promotion"."promotion_voucher" ("promotion_id", "min_spend", "max_discount", "discount_percent", "discount_price")
VALUES ($1, $2, $3, $4, $5)
RETURNING *;

-- name: CreateDefaultPromotionVoucher :one
INSERT INTO "promotion"."promotion_voucher" ("promotion_id", "discount_percent", "discount_price")
VALUES ($1, $2, $3)
RETURNING *;

-- name: UpdatePromotionVoucher :one
UPDATE "promotion"."promotion_voucher"
SET "promotion_id" = COALESCE(sqlc.narg('promotion_id'), "promotion_id"),
    "min_spend" = COALESCE(sqlc.narg('min_spend'), "min_spend"),
    "max_discount" = COALESCE(sqlc.narg('max_discount'), "max_discount"),
    "discount_percent" = CASE WHEN sqlc.arg('null_discount_percent')::bool = TRUE THEN NULL ELSE COALESCE(sqlc.narg('discount_percent'), "discount_percent") END,
    "discount_price" = CASE WHEN sqlc.arg('null_discount_price')::bool = TRUE THEN NULL ELSE COALESCE(sqlc.narg('discount_price'), "discount_price") END
WHERE "id" = $1
RETURNING *;

-- name: DeletePromotionVoucher :exec
DELETE FROM "promotion"."promotion_voucher"
WHERE ("id" = $1) OR ("promotion_id" = $2);

-- ========================================

-- Queries for table: promotion.promotion_redemption

-- ========================================

-- name: GetPromotionRedemption :one
SELECT *
FROM "promotion"."promotion_redemption"
WHERE ("id" = $1);

-- name: CountPromotionRedemption :one
SELECT COUNT(*)
FROM "promotion"."promotion_redemption"
WHERE (
    ("id" = sqlc.narg('id') OR sqlc.narg('id') IS NULL) AND
    ("promotion_id" = sqlc.narg('promotion_id') OR sqlc.narg('promotion_id') IS NULL) AND
    ("version" = sqlc.narg('version') OR sqlc.narg('version') IS NULL) AND
    ("ref_type" = sqlc.narg('ref_type') OR sqlc.narg('ref_type') IS NULL) AND
    ("ref_id" = sqlc.narg('ref_id') OR sqlc.narg('ref_id') IS NULL) AND
    ("date_created" = sqlc.narg('date_created') OR sqlc.narg('date_created') IS NULL)
);

-- name: ListPromotionRedemption :many
SELECT *
FROM "promotion"."promotion_redemption"
WHERE (
    ("id" = sqlc.narg('id') OR sqlc.narg('id') IS NULL) AND
    ("promotion_id" = sqlc.narg('promotion_id') OR sqlc.narg('promotion_id') IS NULL) AND
    ("version" = sqlc.narg('version') OR sqlc.narg('version') IS NULL) AND
    ("ref_type" = sqlc.narg('ref_type') OR sqlc.narg('ref_type') IS NULL) AND
    ("ref_id" = sqlc.narg('ref_id') OR sqlc.narg('ref_id') IS NULL) AND
    ("date_created" = sqlc.narg('date_created') OR sqlc.narg('date_created') IS NULL)
)
ORDER BY "date_created" DESC
LIMIT sqlc.arg('limit')
OFFSET sqlc.arg('offset');

-- name: CreatePromotionRedemption :one
INSERT INTO "promotion"."promotion_redemption" ("promotion_id", "version", "ref_type", "ref_id", "date_created")
VALUES ($1, $2, $3, $4, $5)
RETURNING *;

-- name: CreateDefaultPromotionRedemption :one
INSERT INTO "promotion"."promotion_redemption" ("promotion_id", "version", "ref_type", "ref_id")
VALUES ($1, $2, $3, $4)
RETURNING *;

-- name: UpdatePromotionRedemption :one
UPDATE "promotion"."promotion_redemption"
SET "promotion_id" = COALESCE(sqlc.narg('promotion_id'), "promotion_id"),
    "version" = COALESCE(sqlc.narg('version'), "version"),
    "ref_type" = COALESCE(sqlc.narg('ref_type'), "ref_type"),
    "ref_id" = COALESCE(sqlc.narg('ref_id'), "ref_id"),
    "date_created" = COALESCE(sqlc.narg('date_created'), "date_created")
WHERE "id" = $1
RETURNING *;

-- name: DeletePromotionRedemption :exec
DELETE FROM "promotion"."promotion_redemption"
WHERE ("id" = $1);

-- ========================================

-- Queries for table: shared.resource

-- ========================================

-- name: GetResource :one
SELECT *
FROM "shared"."resource"
WHERE ("id" = $1);

-- name: CountResource :one
SELECT COUNT(*)
FROM "shared"."resource"
WHERE (
    ("id" = sqlc.narg('id') OR sqlc.narg('id') IS NULL) AND
    ("owner_id" = sqlc.narg('owner_id') OR sqlc.narg('owner_id') IS NULL) AND
    ("owner_type" = sqlc.narg('owner_type') OR sqlc.narg('owner_type') IS NULL) AND
    ("order" = sqlc.narg('order') OR sqlc.narg('order') IS NULL)
);

-- name: ListResource :many
SELECT *
FROM "shared"."resource"
WHERE (
    ("id" = sqlc.narg('id') OR sqlc.narg('id') IS NULL) AND
    ("owner_id" = sqlc.narg('owner_id') OR sqlc.narg('owner_id') IS NULL) AND
    ("owner_type" = sqlc.narg('owner_type') OR sqlc.narg('owner_type') IS NULL) AND
    ("order" = sqlc.narg('order') OR sqlc.narg('order') IS NULL)
)
ORDER BY "id"
LIMIT sqlc.arg('limit')
OFFSET sqlc.arg('offset');

-- name: CreateResource :one
INSERT INTO "shared"."resource" ("mime_type", "owner_id", "owner_type", "url", "order")
VALUES ($1, $2, $3, $4, $5)
RETURNING *;

-- name: CreateDefaultResource :one
INSERT INTO "shared"."resource" ("mime_type", "owner_id", "owner_type", "url", "order")
VALUES ($1, $2, $3, $4, $5)
RETURNING *;

-- name: UpdateResource :one
UPDATE "shared"."resource"
SET "mime_type" = COALESCE(sqlc.narg('mime_type'), "mime_type"),
    "owner_id" = COALESCE(sqlc.narg('owner_id'), "owner_id"),
    "owner_type" = COALESCE(sqlc.narg('owner_type'), "owner_type"),
    "url" = COALESCE(sqlc.narg('url'), "url"),
    "order" = COALESCE(sqlc.narg('order'), "order")
WHERE "id" = $1
RETURNING *;

-- name: DeleteResource :exec
DELETE FROM "shared"."resource"
WHERE ("id" = $1);

-- ========================================

-- Queries for table: system.event

-- ========================================

-- name: GetEvent :one
SELECT *
FROM "system"."event"
WHERE ("id" = $1);

-- name: CountEvent :one
SELECT COUNT(*)
FROM "system"."event"
WHERE (
    ("id" = sqlc.narg('id') OR sqlc.narg('id') IS NULL) AND
    ("account_id" = sqlc.narg('account_id') OR sqlc.narg('account_id') IS NULL) AND
    ("aggregate_id" = sqlc.narg('aggregate_id') OR sqlc.narg('aggregate_id') IS NULL) AND
    ("aggregate_type" = sqlc.narg('aggregate_type') OR sqlc.narg('aggregate_type') IS NULL) AND
    ("event_type" = sqlc.narg('event_type') OR sqlc.narg('event_type') IS NULL) AND
    ("payload" = sqlc.narg('payload') OR sqlc.narg('payload') IS NULL) AND
    ("version" = sqlc.narg('version') OR sqlc.narg('version') IS NULL) AND
    ("date_created" = sqlc.narg('date_created') OR sqlc.narg('date_created') IS NULL)
);

-- name: ListEvent :many
SELECT *
FROM "system"."event"
WHERE (
    ("id" = sqlc.narg('id') OR sqlc.narg('id') IS NULL) AND
    ("account_id" = sqlc.narg('account_id') OR sqlc.narg('account_id') IS NULL) AND
    ("aggregate_id" = sqlc.narg('aggregate_id') OR sqlc.narg('aggregate_id') IS NULL) AND
    ("aggregate_type" = sqlc.narg('aggregate_type') OR sqlc.narg('aggregate_type') IS NULL) AND
    ("event_type" = sqlc.narg('event_type') OR sqlc.narg('event_type') IS NULL) AND
    ("payload" = sqlc.narg('payload') OR sqlc.narg('payload') IS NULL) AND
    ("version" = sqlc.narg('version') OR sqlc.narg('version') IS NULL) AND
    ("date_created" = sqlc.narg('date_created') OR sqlc.narg('date_created') IS NULL)
)
ORDER BY "date_created" DESC
LIMIT sqlc.arg('limit')
OFFSET sqlc.arg('offset');

-- name: CreateEvent :one
INSERT INTO "system"."event" ("account_id", "aggregate_id", "aggregate_type", "event_type", "payload", "version", "date_created")
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING *;

-- name: CreateDefaultEvent :one
INSERT INTO "system"."event" ("account_id", "aggregate_id", "aggregate_type", "event_type", "payload", "version")
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING *;

-- name: UpdateEvent :one
UPDATE "system"."event"
SET "account_id" = CASE WHEN sqlc.arg('null_account_id')::bool = TRUE THEN NULL ELSE COALESCE(sqlc.narg('account_id'), "account_id") END,
    "aggregate_id" = COALESCE(sqlc.narg('aggregate_id'), "aggregate_id"),
    "aggregate_type" = COALESCE(sqlc.narg('aggregate_type'), "aggregate_type"),
    "event_type" = COALESCE(sqlc.narg('event_type'), "event_type"),
    "payload" = COALESCE(sqlc.narg('payload'), "payload"),
    "version" = COALESCE(sqlc.narg('version'), "version"),
    "date_created" = COALESCE(sqlc.narg('date_created'), "date_created")
WHERE "id" = $1
RETURNING *;

-- name: DeleteEvent :exec
DELETE FROM "system"."event"
WHERE ("id" = $1);

-- ========================================

-- Queries for table: system.search_sync

-- ========================================

-- name: GetSearchSync :one
SELECT *
FROM "system"."search_sync"
WHERE ("id" = $1);

-- name: CountSearchSync :one
SELECT COUNT(*)
FROM "system"."search_sync"
WHERE (
    ("id" = sqlc.narg('id') OR sqlc.narg('id') IS NULL) AND
    ("name" = sqlc.narg('name') OR sqlc.narg('name') IS NULL) AND
    ("last_synced" = sqlc.narg('last_synced') OR sqlc.narg('last_synced') IS NULL)
);

-- name: ListSearchSync :many
SELECT *
FROM "system"."search_sync"
WHERE (
    ("id" = sqlc.narg('id') OR sqlc.narg('id') IS NULL) AND
    ("name" = sqlc.narg('name') OR sqlc.narg('name') IS NULL) AND
    ("last_synced" = sqlc.narg('last_synced') OR sqlc.narg('last_synced') IS NULL)
)
ORDER BY "id"
LIMIT sqlc.arg('limit')
OFFSET sqlc.arg('offset');

-- name: CreateSearchSync :one
INSERT INTO "system"."search_sync" ("name", "last_synced")
VALUES ($1, $2)
RETURNING *;

-- name: CreateDefaultSearchSync :one
INSERT INTO "system"."search_sync" ("name")
VALUES ($1)
RETURNING *;

-- name: UpdateSearchSync :one
UPDATE "system"."search_sync"
SET "name" = COALESCE(sqlc.narg('name'), "name"),
    "last_synced" = COALESCE(sqlc.narg('last_synced'), "last_synced")
WHERE "id" = $1
RETURNING *;

-- name: DeleteSearchSync :exec
DELETE FROM "system"."search_sync"
WHERE ("id" = $1);